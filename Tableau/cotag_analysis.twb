<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10400.17.1103.1137                               -->
<workbook original-version='10.4' source-build='10.4.1 (10400.17.1103.1137)' source-platform='win' version='10.4' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='correlation_coins_vs_commu' inline='true' name='federated.0ayyncq0a2ap6d1fj7oly0fo1mge' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='correlation_coins_vs_commu' name='textscan.0v9zjz311x154c160z33416yi47g'>
            <connection class='textscan' directory='C:/Users/Auu/Desktop/community_compare/main/merged_nw' filename='correlation_coins_vs_commu.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.0v9zjz311x154c160z33416yi47g' name='correlation_coins_vs_commu.csv' table='[correlation_coins_vs_commu#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
            <column datatype='string' name='Community' ordinal='0' />
            <column datatype='real' name='Pearson' ordinal='1' />
            <column datatype='real' name='Spearman' ordinal='2' />
            <column datatype='real' name='Kendall' ordinal='3' />
            <column datatype='real' name='Average' ordinal='4' />
            <column datatype='real' name='Pearson_log' ordinal='5' />
            <column datatype='real' name='Spearman_log' ordinal='6' />
            <column datatype='real' name='Kendall_log' ordinal='7' />
            <column datatype='real' name='Average_log' ordinal='8' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Community</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Community]</local-name>
            <parent-name>[correlation_coins_vs_commu.csv]</parent-name>
            <remote-alias>Community</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Pearson</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Pearson]</local-name>
            <parent-name>[correlation_coins_vs_commu.csv]</parent-name>
            <remote-alias>Pearson</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Spearman</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Spearman]</local-name>
            <parent-name>[correlation_coins_vs_commu.csv]</parent-name>
            <remote-alias>Spearman</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Kendall</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Kendall]</local-name>
            <parent-name>[correlation_coins_vs_commu.csv]</parent-name>
            <remote-alias>Kendall</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Average</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Average]</local-name>
            <parent-name>[correlation_coins_vs_commu.csv]</parent-name>
            <remote-alias>Average</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Pearson_log</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Pearson_log]</local-name>
            <parent-name>[correlation_coins_vs_commu.csv]</parent-name>
            <remote-alias>Pearson_log</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Spearman_log</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Spearman_log]</local-name>
            <parent-name>[correlation_coins_vs_commu.csv]</parent-name>
            <remote-alias>Spearman_log</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Kendall_log</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Kendall_log]</local-name>
            <parent-name>[correlation_coins_vs_commu.csv]</parent-name>
            <remote-alias>Kendall_log</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Average_log</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Average_log]</local-name>
            <parent-name>[correlation_coins_vs_commu.csv]</parent-name>
            <remote-alias>Average_log</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[correlation_coins_vs_commu.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;Â£&quot;</attribute>
              <attribute datatype='string' name='debit-close-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='debit-open-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' name='[Average]' role='measure' type='quantitative' />
      <column caption='Average log' datatype='real' name='[Average_log]' role='measure' type='quantitative' />
      <column datatype='string' name='[Community]' role='dimension' type='nominal' />
      <column datatype='real' name='[Kendall]' role='measure' type='quantitative' />
      <column caption='Kendall log' datatype='real' name='[Kendall_log]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' name='[Pearson]' role='measure' type='quantitative' />
      <column caption='Pearson log' datatype='real' name='[Pearson_log]' role='measure' type='quantitative' />
      <column datatype='real' name='[Spearman]' role='measure' type='quantitative' />
      <column caption='Spearman log' datatype='real' name='[Spearman_log]' role='measure' type='quantitative' />
      <column-instance column='[Community]' derivation='None' name='[none:Community:nk]' pivot='key' type='nominal' />
      <column-instance column='[Average]' derivation='Sum' name='[sum:Average:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Average_log]' derivation='Sum' name='[sum:Average_log:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Kendall]' derivation='Sum' name='[sum:Kendall:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Kendall_log]' derivation='Sum' name='[sum:Kendall_log:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pearson]' derivation='Sum' name='[sum:Pearson:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pearson_log]' derivation='Sum' name='[sum:Pearson_log:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Spearman]' derivation='Sum' name='[sum:Spearman:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Spearman_log]' derivation='Sum' name='[sum:Spearman_log:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.318872' measure-ordering='alphabetic' measure-percentage='0.681128' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Community:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Tech&amp;Business&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;General&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Crypto-News&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Crypto-Buzz&amp;Ads&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;All&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Trading&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Kendall_log:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Kendall:qk]&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Spearman_log:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Pearson_log:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Average_log:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Pearson:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Average:qk]&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Spearman:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Thailand&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='edges_heatmap' inline='true' name='federated.1ifcomn0rciu4115xflzi154xhda' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='edges_heatmap' name='textscan.1gjg9fl01c04k116bjb5h1jl6fc5'>
            <connection class='textscan' directory='C:/Users/Auu/Desktop/community_compare/main/merged_nw' filename='edges_heatmap.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1gjg9fl01c04k116bjb5h1jl6fc5' name='edges_heatmap.csv' table='[edges_heatmap#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
            <column datatype='string' name='source' ordinal='0' />
            <column datatype='string' name='target' ordinal='1' />
            <column datatype='real' name='weight' ordinal='2' />
            <column datatype='real' name='log_weight' ordinal='3' />
            <column datatype='integer' name='rank' ordinal='4' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>source</remote-name>
            <remote-type>129</remote-type>
            <local-name>[source]</local-name>
            <parent-name>[edges_heatmap.csv]</parent-name>
            <remote-alias>source</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>target</remote-name>
            <remote-type>129</remote-type>
            <local-name>[target]</local-name>
            <parent-name>[edges_heatmap.csv]</parent-name>
            <remote-alias>target</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>weight</remote-name>
            <remote-type>5</remote-type>
            <local-name>[weight]</local-name>
            <parent-name>[edges_heatmap.csv]</parent-name>
            <remote-alias>weight</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>log_weight</remote-name>
            <remote-type>5</remote-type>
            <local-name>[log_weight]</local-name>
            <parent-name>[edges_heatmap.csv]</parent-name>
            <remote-alias>log_weight</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rank</remote-name>
            <remote-type>20</remote-type>
            <local-name>[rank]</local-name>
            <parent-name>[edges_heatmap.csv]</parent-name>
            <remote-alias>rank</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[edges_heatmap.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;Â£&quot;</attribute>
              <attribute datatype='string' name='debit-close-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='debit-open-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Cryptos' datatype='string' name='[source]' role='dimension' type='nominal' />
      <column caption='Target' datatype='string' name='[target]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;1_BTC&quot;' value='1' />
          <alias key='&quot;10_TRX&quot;' value='10' />
          <alias key='&quot;11_NEO&quot;' value='11' />
          <alias key='&quot;12_XMR&quot;' value='12' />
          <alias key='&quot;13_DASH&quot;' value='13' />
          <alias key='&quot;14_XEM&quot;' value='14' />
          <alias key='&quot;15_USDT&quot;' value='15' />
          <alias key='&quot;16_VEN&quot;' value='16' />
          <alias key='&quot;17_ETC&quot;' value='17' />
          <alias key='&quot;18_BCN&quot;' value='18' />
          <alias key='&quot;19_BNB&quot;' value='19' />
          <alias key='&quot;2_ETH&quot;' value='2' />
          <alias key='&quot;20_QTUM&quot;' value='20' />
          <alias key='&quot;21_ZEC&quot;' value='21' />
          <alias key='&quot;22_ICX&quot;' value='22' />
          <alias key='&quot;23_OMG&quot;' value='23' />
          <alias key='&quot;24_LSK&quot;' value='24' />
          <alias key='&quot;25_ZIL&quot;' value='25' />
          <alias key='&quot;26_BTG&quot;' value='26' />
          <alias key='&quot;27_AE&quot;' value='27' />
          <alias key='&quot;28_ONT&quot;' value='28' />
          <alias key='&quot;29_XVG&quot;' value='29' />
          <alias key='&quot;3_XRP&quot;' value='3' />
          <alias key='&quot;30_STEEM&quot;' value='30' />
          <alias key='&quot;4_BCH&quot;' value='4' />
          <alias key='&quot;5_EOS&quot;' value='5' />
          <alias key='&quot;6_LTC&quot;' value='6' />
          <alias key='&quot;7_ADA&quot;' value='7' />
          <alias key='&quot;8_XLM&quot;' value='8' />
          <alias key='&quot;9_IOTA&quot;' value='9' />
          <alias key='&quot;BUSINESS&amp;TECH&quot;' value='TECH&amp;BUSINESS' />
          <alias key='&quot;BUZZ&amp;ADS&quot;' value='CRYPTO-BUZZ&amp;ADS' />
          <alias key='&quot;MARKET&amp;NEWS&quot;' value='CRYPTO-NEWS' />
          <alias key='&quot;MONEY&amp;TRADING&quot;' value='TRADING' />
        </aliases>
      </column>
      <column caption='Weight' datatype='real' name='[weight]' role='measure' type='quantitative' />
      <column-instance column='[source]' derivation='None' name='[none:source:nk]' pivot='key' type='nominal' />
      <column-instance column='[target]' derivation='None' name='[none:target:nk]' pivot='key' type='nominal' />
      <group hidden='true' name='[Exclusions (Source,Target)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:source:nk]' />
          <groupfilter function='level-members' level='[none:target:nk]' />
        </groupfilter>
      </group>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='G:/work/TwitterAPI/Tableau/edges_heatmap.tde' schema='Extract' tablename='Extract' update-time='08/08/2018 12:29:59 AM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='1224' timestamp-start='2018-08-08 00:29:59.191' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Number of Records</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Number of Records]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records</remote-alias>
              <ordinal>0</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>1224.0</statistic>
                <statistic aggregation='Avg' datatype='real'>1.0</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.0</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.0</statistic>
                <statistic aggregation='Var' datatype='real'>0.0</statistic>
                <statistic aggregation='VarP' datatype='real'>0.0</statistic>
                <statistic aggregation='Count' datatype='integer'>1224</statistic>
                <statistic aggregation='Median' datatype='integer'>1</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>1224.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>log_weight</remote-name>
              <remote-type>5</remote-type>
              <local-name>[log_weight]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>log_weight</remote-alias>
              <ordinal>1</ordinal>
              <family>edges_heatmap.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>629</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>3355.1196594920057</statistic>
                <statistic aggregation='Avg' datatype='real'>2.7411108329183054</statistic>
                <statistic aggregation='Min' datatype='real'>0.000112932</statistic>
                <statistic aggregation='Max' datatype='real'>10.41760463</statistic>
                <statistic aggregation='Stdev' datatype='real'>2.1460169607117852</statistic>
                <statistic aggregation='StdevP' datatype='real'>2.145140140670807</statistic>
                <statistic aggregation='Var' datatype='real'>4.6053887956626474</statistic>
                <statistic aggregation='VarP' datatype='real'>4.6016262231171705</statistic>
                <statistic aggregation='Count' datatype='integer'>1224</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>14829.14534146613</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>rank</remote-name>
              <remote-type>16</remote-type>
              <local-name>[rank]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>rank</remote-alias>
              <ordinal>2</ordinal>
              <family>edges_heatmap.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>31</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>4650.0</statistic>
                <statistic aggregation='Avg' datatype='real'>15.5</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>30</statistic>
                <statistic aggregation='Stdev' datatype='real'>8.6699033489576784</statistic>
                <statistic aggregation='StdevP' datatype='real'>8.6554414483991895</statistic>
                <statistic aggregation='Var' datatype='real'>75.167224080267559</statistic>
                <statistic aggregation='VarP' datatype='real'>74.916666666666671</statistic>
                <statistic aggregation='Count' datatype='integer'>300</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>94550.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>source</remote-name>
              <remote-type>129</remote-type>
              <local-name>[source]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>source</remote-alias>
              <ordinal>3</ordinal>
              <family>edges_heatmap.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>35</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;1_BTC&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;MONEY&amp;TRADING&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>1224</statistic>
                <statistic aggregation='Median' datatype='string'>&quot;25_ZIL&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>target</remote-name>
              <remote-type>129</remote-type>
              <local-name>[target]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>target</remote-alias>
              <ordinal>4</ordinal>
              <family>edges_heatmap.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>35</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;1_BTC&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;MONEY&amp;TRADING&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>1224</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>weight</remote-name>
              <remote-type>5</remote-type>
              <local-name>[weight]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>weight</remote-alias>
              <ordinal>5</ordinal>
              <family>edges_heatmap.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>629</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>393999.63111013267</statistic>
                <statistic aggregation='Avg' datatype='real'>321.89512345599076</statistic>
                <statistic aggregation='Min' datatype='real'>1.000112938</statistic>
                <statistic aggregation='Max' datatype='real'>33443.229140000003</statistic>
                <statistic aggregation='Stdev' datatype='real'>1806.8170418641105</statistic>
                <statistic aggregation='StdevP' datatype='real'>1806.0788121941264</statistic>
                <statistic aggregation='Var' datatype='real'>3264587.8227705751</statistic>
                <statistic aggregation='VarP' datatype='real'>3261920.6758565465</statistic>
                <statistic aggregation='Count' datatype='integer'>1224</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>4119417467.1462245</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.453362' measure-ordering='alphabetic' measure-percentage='0.546638' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Thailand&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='crypto_vs_community'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Relationship between Cryptocurrencies and Communities</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='edges_heatmap' name='federated.1ifcomn0rciu4115xflzi154xhda' />
          </datasources>
          <datasource-dependencies datasource='federated.1ifcomn0rciu4115xflzi154xhda'>
            <column datatype='real' name='[log_weight]' role='measure' type='quantitative' />
            <column-instance column='[source]' derivation='None' name='[none:source:nk]' pivot='key' type='nominal' />
            <column-instance column='[target]' derivation='None' name='[none:target:nk]' pivot='key' type='nominal' />
            <column caption='Cryptos' datatype='string' name='[source]' role='dimension' type='nominal' />
            <column-instance column='[log_weight]' derivation='Sum' name='[sum:log_weight:qk]' pivot='key' type='quantitative' />
            <column caption='Target' datatype='string' name='[target]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;1_BTC&quot;' value='1' />
                <alias key='&quot;10_TRX&quot;' value='10' />
                <alias key='&quot;11_NEO&quot;' value='11' />
                <alias key='&quot;12_XMR&quot;' value='12' />
                <alias key='&quot;13_DASH&quot;' value='13' />
                <alias key='&quot;14_XEM&quot;' value='14' />
                <alias key='&quot;15_USDT&quot;' value='15' />
                <alias key='&quot;16_VEN&quot;' value='16' />
                <alias key='&quot;17_ETC&quot;' value='17' />
                <alias key='&quot;18_BCN&quot;' value='18' />
                <alias key='&quot;19_BNB&quot;' value='19' />
                <alias key='&quot;2_ETH&quot;' value='2' />
                <alias key='&quot;20_QTUM&quot;' value='20' />
                <alias key='&quot;21_ZEC&quot;' value='21' />
                <alias key='&quot;22_ICX&quot;' value='22' />
                <alias key='&quot;23_OMG&quot;' value='23' />
                <alias key='&quot;24_LSK&quot;' value='24' />
                <alias key='&quot;25_ZIL&quot;' value='25' />
                <alias key='&quot;26_BTG&quot;' value='26' />
                <alias key='&quot;27_AE&quot;' value='27' />
                <alias key='&quot;28_ONT&quot;' value='28' />
                <alias key='&quot;29_XVG&quot;' value='29' />
                <alias key='&quot;3_XRP&quot;' value='3' />
                <alias key='&quot;30_STEEM&quot;' value='30' />
                <alias key='&quot;4_BCH&quot;' value='4' />
                <alias key='&quot;5_EOS&quot;' value='5' />
                <alias key='&quot;6_LTC&quot;' value='6' />
                <alias key='&quot;7_ADA&quot;' value='7' />
                <alias key='&quot;8_XLM&quot;' value='8' />
                <alias key='&quot;9_IOTA&quot;' value='9' />
                <alias key='&quot;BUSINESS&amp;TECH&quot;' value='TECH&amp;BUSINESS' />
                <alias key='&quot;BUZZ&amp;ADS&quot;' value='CRYPTO-BUZZ&amp;ADS' />
                <alias key='&quot;MARKET&amp;NEWS&quot;' value='CRYPTO-NEWS' />
                <alias key='&quot;MONEY&amp;TRADING&quot;' value='TRADING' />
              </aliases>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ifcomn0rciu4115xflzi154xhda].[Exclusions (Source,Target)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:source:nk]' />
                <groupfilter function='level-members' level='[none:target:nk]' />
              </groupfilter>
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;1_BTC&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;10_TRX&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;11_NEO&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;12_XMR&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;13_DASH&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;14_XEM&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;15_USDT&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;16_VEN&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;17_ETC&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;18_BCN&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;19_BNB&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;2_ETH&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;21_ZEC&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;22_ICX&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;23_OMG&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;24_LSK&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;25_ZIL&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;26_BTG&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;27_AE&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;28_ONT&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;29_XVG&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;3_XRP&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;30_STEEM&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;4_BCH&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;5_EOS&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;6_LTC&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;7_ADA&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;8_XLM&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;9_IOTA&quot;' />
                  </groupfilter>
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;1_BTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;10_TRX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;11_NEO&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;12_XMR&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;13_DASH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;14_XEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;15_USDT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;16_VEN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;17_ETC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;18_BCN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;19_BNB&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;2_ETH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;20_QTUM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;21_ZEC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;22_ICX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;23_OMG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;24_LSK&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;25_ZIL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;26_BTG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;27_AE&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;28_ONT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;29_XVG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;3_XRP&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;30_STEEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;4_BCH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;5_EOS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;6_LTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;7_ADA&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;8_XLM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;9_IOTA&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;1_MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;2_BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;3_GENERAL&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;4_BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;5_MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;1_MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;2_BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;3_GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;4_BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;5_MONEY&amp;TRADING&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ADA&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;AE&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BCH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BCN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BNB&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BTG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;DASH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;EOS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ETC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ETH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ICX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;IOTA&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;LSK&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;LTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;NEO&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;OMG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ONT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;QTUM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;STEEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;TRX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;USDT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;VEN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;XEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;XLM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;XMR&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;XRP&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;XVG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ZEC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ZIL&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;20_QTUM&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;1_BTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;10_TRX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;11_NEO&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;12_XMR&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;13_DASH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;14_XEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;15_USDT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;16_VEN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;17_ETC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;18_BCN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;19_BNB&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;2_ETH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;21_ZEC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;22_ICX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;23_OMG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;24_LSK&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;25_ZIL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;26_BTG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;27_AE&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;28_ONT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;29_XVG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;3_XRP&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;30_STEEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;4_BCH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;5_EOS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;6_LTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;7_ADA&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;8_XLM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;9_IOTA&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;ADA&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;AE&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;BCH&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;BCN&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;BNB&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;BTC&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;BTG&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;DASH&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;EOS&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;ETC&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;ETH&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;ICX&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;IOTA&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;LSK&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;LTC&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;NEO&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;OMG&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;ONT&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;STEEM&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;TRX&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;USDT&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;VEN&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;XEM&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;XLM&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;XMR&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;XRP&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;XVG&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;ZEC&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;ZIL&quot;' />
                  </groupfilter>
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ADA&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;AE&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BCH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BCN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BNB&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BTG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;DASH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;EOS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ETC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ETH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ICX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;IOTA&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;LSK&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;LTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;NEO&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;OMG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ONT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;QTUM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;STEEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;TRX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;USDT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;VEN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;XEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;XLM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;XMR&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;XRP&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;XVG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ZEC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ZIL&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;1_BTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;10_TRX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;11_NEO&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;12_XMR&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;13_DASH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;14_XEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;15_USDT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;16_VEN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;17_ETC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;18_BCN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;19_BNB&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;2_ETH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;20_QTUM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;21_ZEC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;22_ICX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;23_OMG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;24_LSK&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;25_ZIL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;26_BTG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;27_AE&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;28_ONT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;29_XVG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;3_XRP&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;30_STEEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;4_BCH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;5_EOS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;6_LTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;7_ADA&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;8_XLM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;9_IOTA&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;QTUM&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ADA&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;AE&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BCH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BCN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BNB&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BTG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;DASH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;EOS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ETC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ETH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ICX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;IOTA&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;LSK&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;LTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;NEO&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;OMG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ONT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;STEEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;TRX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;USDT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;VEN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;XEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;XLM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;XMR&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;XRP&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;XVG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ZEC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;ZIL&quot;' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <sort class='computed' column='[federated.1ifcomn0rciu4115xflzi154xhda].[none:target:nk]' direction='DESC' using='[federated.1ifcomn0rciu4115xflzi154xhda].[sum:log_weight:qk]'>
            <groupfilter function='member' level='[none:source:nk]' member='&quot;1_BTC&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </sort>
          <slices>
            <column>[federated.1ifcomn0rciu4115xflzi154xhda].[Exclusions (Source,Target)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:target:nk]' value='15' />
            <format attr='height' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:source:nk]' value='14' />
            <format attr='width' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:source:nk]' value='19' />
            <format attr='height' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:target:nk]' value='19' />
            <format attr='text-align' value='left' />
            <format attr='text-orientation' value='90' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:source:nk]' value='68' />
            <format attr='height' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:target:nk]' value='117' />
            <format attr='width' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:target:nk]' value='120' />
            <format attr='height' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:source:nk]' value='64' />
            <format attr='text-align' data-class='subtotal' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:target:nk]' value='left' />
            <format attr='text-orientation' data-class='subtotal' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:target:nk]' value='-90' />
            <format attr='vertical-align' data-class='subtotal' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:target:nk]' value='top' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:target:nk]' value='0' />
            <format attr='text-orientation' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:source:nk]' value='-90' />
            <format attr='vertical-align' scope='cols' value='bottom' />
            <format attr='text-orientation' scope='cols' value='0' />
            <format attr='text-align' scope='cols' value='center' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1ifcomn0rciu4115xflzi154xhda].[sum:log_weight:qk]' palette='sunrise_sunset_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend-title'>
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.1ifcomn0rciu4115xflzi154xhda].[sum:log_weight:qk]' value='log(weight)' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ifcomn0rciu4115xflzi154xhda].[sum:log_weight:qk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ifcomn0rciu4115xflzi154xhda].[none:target:nk]</rows>
        <cols>[federated.1ifcomn0rciu4115xflzi154xhda].[none:source:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='crypto_vs_crypto'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Relationship between Cryptocurrencies </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='edges_heatmap' name='federated.1ifcomn0rciu4115xflzi154xhda' />
          </datasources>
          <datasource-dependencies datasource='federated.1ifcomn0rciu4115xflzi154xhda'>
            <column datatype='real' name='[log_weight]' role='measure' type='quantitative' />
            <column-instance column='[source]' derivation='None' name='[none:source:nk]' pivot='key' type='nominal' />
            <column-instance column='[target]' derivation='None' name='[none:target:nk]' pivot='key' type='nominal' />
            <column caption='Cryptos' datatype='string' name='[source]' role='dimension' type='nominal' />
            <column-instance column='[log_weight]' derivation='Sum' name='[sum:log_weight:qk]' pivot='key' type='quantitative' />
            <column caption='Target' datatype='string' name='[target]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;1_BTC&quot;' value='1' />
                <alias key='&quot;10_TRX&quot;' value='10' />
                <alias key='&quot;11_NEO&quot;' value='11' />
                <alias key='&quot;12_XMR&quot;' value='12' />
                <alias key='&quot;13_DASH&quot;' value='13' />
                <alias key='&quot;14_XEM&quot;' value='14' />
                <alias key='&quot;15_USDT&quot;' value='15' />
                <alias key='&quot;16_VEN&quot;' value='16' />
                <alias key='&quot;17_ETC&quot;' value='17' />
                <alias key='&quot;18_BCN&quot;' value='18' />
                <alias key='&quot;19_BNB&quot;' value='19' />
                <alias key='&quot;2_ETH&quot;' value='2' />
                <alias key='&quot;20_QTUM&quot;' value='20' />
                <alias key='&quot;21_ZEC&quot;' value='21' />
                <alias key='&quot;22_ICX&quot;' value='22' />
                <alias key='&quot;23_OMG&quot;' value='23' />
                <alias key='&quot;24_LSK&quot;' value='24' />
                <alias key='&quot;25_ZIL&quot;' value='25' />
                <alias key='&quot;26_BTG&quot;' value='26' />
                <alias key='&quot;27_AE&quot;' value='27' />
                <alias key='&quot;28_ONT&quot;' value='28' />
                <alias key='&quot;29_XVG&quot;' value='29' />
                <alias key='&quot;3_XRP&quot;' value='3' />
                <alias key='&quot;30_STEEM&quot;' value='30' />
                <alias key='&quot;4_BCH&quot;' value='4' />
                <alias key='&quot;5_EOS&quot;' value='5' />
                <alias key='&quot;6_LTC&quot;' value='6' />
                <alias key='&quot;7_ADA&quot;' value='7' />
                <alias key='&quot;8_XLM&quot;' value='8' />
                <alias key='&quot;9_IOTA&quot;' value='9' />
                <alias key='&quot;BUSINESS&amp;TECH&quot;' value='TECH&amp;BUSINESS' />
                <alias key='&quot;BUZZ&amp;ADS&quot;' value='CRYPTO-BUZZ&amp;ADS' />
                <alias key='&quot;MARKET&amp;NEWS&quot;' value='CRYPTO-NEWS' />
                <alias key='&quot;MONEY&amp;TRADING&quot;' value='TRADING' />
              </aliases>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ifcomn0rciu4115xflzi154xhda].[Exclusions (Source,Target)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:source:nk]' />
                <groupfilter function='level-members' level='[none:target:nk]' />
              </groupfilter>
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;1_BTC&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;1_BTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;10_TRX&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;10_TRX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;11_NEO&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;11_NEO&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;12_XMR&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;12_XMR&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;13_DASH&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;13_DASH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;14_XEM&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;14_XEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;15_USDT&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;15_USDT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;16_VEN&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;16_VEN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;17_ETC&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;17_ETC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;18_BCN&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;18_BCN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;19_BNB&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;19_BNB&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;2_ETH&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;2_ETH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;20_QTUM&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;21_ZEC&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;21_ZEC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;22_ICX&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;22_ICX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;23_OMG&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;23_OMG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;24_LSK&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;24_LSK&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;25_ZIL&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;25_ZIL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;26_BTG&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;26_BTG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;27_AE&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;27_AE&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;28_ONT&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;28_ONT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;29_XVG&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;29_XVG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;3_XRP&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;3_XRP&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;30_STEEM&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;30_STEEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;4_BCH&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;4_BCH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;5_EOS&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;5_EOS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;6_LTC&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;6_LTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;7_ADA&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;7_ADA&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;8_XLM&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;8_XLM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:source:nk]' member='&quot;9_IOTA&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;9_IOTA&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:source:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;1_BTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;10_TRX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;11_NEO&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;12_XMR&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;13_DASH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;14_XEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;15_USDT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;16_VEN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;17_ETC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;18_BCN&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;19_BNB&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;2_ETH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;20_QTUM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;21_ZEC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;22_ICX&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;23_OMG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;24_LSK&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;25_ZIL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;26_BTG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;27_AE&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;28_ONT&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;29_XVG&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;3_XRP&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;30_STEEM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;4_BCH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;5_EOS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;6_LTC&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;7_ADA&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;8_XLM&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;9_IOTA&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUSINESS&amp;TECH&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;BUZZ&amp;ADS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;GENERAL&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MARKET&amp;NEWS&quot;' />
                    <groupfilter function='member' level='[none:target:nk]' member='&quot;MONEY&amp;TRADING&quot;' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <sort class='manual' column='[federated.1ifcomn0rciu4115xflzi154xhda].[none:source:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;1_BTC&quot;</bucket>
              <bucket>&quot;2_ETH&quot;</bucket>
              <bucket>&quot;3_XRP&quot;</bucket>
              <bucket>&quot;4_BCH&quot;</bucket>
              <bucket>&quot;5_EOS&quot;</bucket>
              <bucket>&quot;6_LTC&quot;</bucket>
              <bucket>&quot;7_ADA&quot;</bucket>
              <bucket>&quot;8_XLM&quot;</bucket>
              <bucket>&quot;9_IOTA&quot;</bucket>
              <bucket>&quot;10_TRX&quot;</bucket>
              <bucket>&quot;11_NEO&quot;</bucket>
              <bucket>&quot;12_XMR&quot;</bucket>
              <bucket>&quot;13_DASH&quot;</bucket>
              <bucket>&quot;14_XEM&quot;</bucket>
              <bucket>&quot;15_USDT&quot;</bucket>
              <bucket>&quot;16_VEN&quot;</bucket>
              <bucket>&quot;17_ETC&quot;</bucket>
              <bucket>&quot;18_BCN&quot;</bucket>
              <bucket>&quot;19_BNB&quot;</bucket>
              <bucket>&quot;20_QTUM&quot;</bucket>
              <bucket>&quot;21_ZEC&quot;</bucket>
              <bucket>&quot;22_ICX&quot;</bucket>
              <bucket>&quot;23_OMG&quot;</bucket>
              <bucket>&quot;24_LSK&quot;</bucket>
              <bucket>&quot;25_ZIL&quot;</bucket>
              <bucket>&quot;26_BTG&quot;</bucket>
              <bucket>&quot;27_AE&quot;</bucket>
              <bucket>&quot;28_ONT&quot;</bucket>
              <bucket>&quot;29_XVG&quot;</bucket>
              <bucket>&quot;30_STEEM&quot;</bucket>
              <bucket>&quot;BUZZ&amp;ADS&quot;</bucket>
              <bucket>&quot;GENERAL&quot;</bucket>
              <bucket>&quot;BUSINESS&amp;TECH&quot;</bucket>
              <bucket>&quot;MARKET&amp;NEWS&quot;</bucket>
              <bucket>&quot;MONEY&amp;TRADING&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[federated.1ifcomn0rciu4115xflzi154xhda].[Exclusions (Source,Target)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:target:nk]' value='18' />
            <format attr='height' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:source:nk]' value='14' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:source:nk]' value='68' />
            <format attr='height' field='[federated.1ifcomn0rciu4115xflzi154xhda].[none:target:nk]' value='25' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1ifcomn0rciu4115xflzi154xhda].[sum:log_weight:qk]' palette='sunrise_sunset_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.1ifcomn0rciu4115xflzi154xhda].[sum:log_weight:qk]' value='log(weight)'>
              <formatted-text>
                <run>log(weight)</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ifcomn0rciu4115xflzi154xhda].[sum:log_weight:qk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ifcomn0rciu4115xflzi154xhda].[none:source:nk]</rows>
        <cols>[federated.1ifcomn0rciu4115xflzi154xhda].[none:target:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='rank_vs_edgeweight_correlation'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Correlation between Crypto&apos;s Rankings and Weight of connections to communities</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='correlation_coins_vs_commu' name='federated.0ayyncq0a2ap6d1fj7oly0fo1mge' />
          </datasources>
          <datasource-dependencies datasource='federated.0ayyncq0a2ap6d1fj7oly0fo1mge'>
            <column datatype='real' name='[Average]' role='measure' type='quantitative' />
            <column caption='Average log' datatype='real' name='[Average_log]' role='measure' type='quantitative' />
            <column datatype='string' name='[Community]' role='dimension' type='nominal' />
            <column datatype='real' name='[Kendall]' role='measure' type='quantitative' />
            <column caption='Kendall log' datatype='real' name='[Kendall_log]' role='measure' type='quantitative' />
            <column datatype='real' name='[Pearson]' role='measure' type='quantitative' />
            <column caption='Pearson log' datatype='real' name='[Pearson_log]' role='measure' type='quantitative' />
            <column datatype='real' name='[Spearman]' role='measure' type='quantitative' />
            <column caption='Spearman log' datatype='real' name='[Spearman_log]' role='measure' type='quantitative' />
            <column-instance column='[Community]' derivation='None' name='[none:Community:nk]' pivot='key' type='nominal' />
            <column-instance column='[Average]' derivation='Sum' name='[sum:Average:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Average_log]' derivation='Sum' name='[sum:Average_log:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Kendall]' derivation='Sum' name='[sum:Kendall:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Kendall_log]' derivation='Sum' name='[sum:Kendall_log:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pearson]' derivation='Sum' name='[sum:Pearson:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pearson_log]' derivation='Sum' name='[sum:Pearson_log:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spearman]' derivation='Sum' name='[sum:Spearman:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spearman_log]' derivation='Sum' name='[sum:Spearman_log:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Pearson:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Spearman:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Kendall:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Average:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Pearson_log:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Spearman_log:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Kendall_log:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Average_log:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Pearson:qk]&quot;</bucket>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Spearman:qk]&quot;</bucket>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Kendall:qk]&quot;</bucket>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Average:qk]&quot;</bucket>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Pearson_log:qk]&quot;</bucket>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Spearman_log:qk]&quot;</bucket>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Kendall_log:qk]&quot;</bucket>
              <bucket>&quot;[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Average_log:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='computed' column='[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[none:Community:nk]' direction='ASC' using='[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Average:qk]' />
          <slices>
            <column>[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[:Measure Names]' value='88' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[none:Community:nk]' value='108' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Pearson_log:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Text' />
            <encodings>
              <text column='[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[none:Community:nk]</rows>
        <cols>[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[:Measure Names]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size maxheight='1024' maxwidth='1024' minheight='1024' minwidth='1024' preset-index='2' sizing-mode='fixed' />
      <zones use-insets='false'>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='76465' id='9' param='horz' type='layout-flow' w='98438' x='781' y='22754'>
            <zone h='76465' id='5' param='horz' type='layout-flow' w='98438' x='781' y='22754'>
              <zone h='76465' id='3' type='layout-basic' w='98438' x='781' y='22754'>
                <zone h='24031' id='15' name='rank_vs_edgeweight_correlation' w='98438' x='781' y='22754'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='52434' id='16' name='crypto_vs_crypto' w='98438' x='781' y='46785'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone h='21973' id='1' name='crypto_vs_community' w='76660' x='781' y='781'>
            <layout-cache fixed-size-w='161' type-h='fixed' type-w='fixed' />
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='21973' id='12' name='crypto_vs_community' pane-specification-id='0' param='[federated.1ifcomn0rciu4115xflzi154xhda].[sum:log_weight:qk]' type='color' w='21778' x='77441' y='781'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='51'>
    <window class='worksheet' name='crypto_vs_crypto'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ifcomn0rciu4115xflzi154xhda].[sum:log_weight:qk]' type='color' />
            <card AVG='true' KURTOSIS='false' MAX='true' MEDIAN='true' MIN='true' QUART1='false' QUART3='false' SKEWNESS='false' STDEV='false' SUM='true' type='summary' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='96'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ifcomn0rciu4115xflzi154xhda].[none:source:nk]</field>
            <field>[federated.1ifcomn0rciu4115xflzi154xhda].[none:target:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='crypto_vs_community'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ifcomn0rciu4115xflzi154xhda].[sum:log_weight:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ifcomn0rciu4115xflzi154xhda].[none:source:nk]</field>
            <field>[federated.1ifcomn0rciu4115xflzi154xhda].[none:target:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='rank_vs_edgeweight_correlation'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[:Measure Names]</field>
            <field>[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[none:Community:nk]</field>
            <field>[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[none:Pearson:qk]</field>
            <field>[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[none:Spearman:qk]</field>
            <field>[federated.0ayyncq0a2ap6d1fj7oly0fo1mge].[sum:Spearman:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='crypto_vs_community' />
        <viewpoint name='crypto_vs_crypto' />
        <viewpoint name='rank_vs_edgeweight_correlation' />
      </viewpoints>
      <active id='16' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      YII=
    </thumbnail>
    <thumbnail height='163' name='crypto_vs_community' width='192'>
      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
      YII=
    </thumbnail>
    <thumbnail height='192' name='crypto_vs_crypto' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy9d3QVV57v+6mqk8/RUZaQhAJBgMjRJhkbJ2xjsHHAoR26Hdrtdvesue/d
      mTdzZ+66c9O7b969M3dmutttu21jnI2xAZNNRuQgksggQAjlfPI5Fd4fwoBA1D7YYOjn+qzV
      q5vW7+y9a1f9au/67t/+bckwDAMLi58o8s1ugIXFzcRyAIufNJYDWPyksRzA4ieN5QAWP2ks
      B7D4SWM5gMVPGuUf/uEf/uFmNyIZ9FiQvVtWsuFgJwNLC1B6sDF0jUNblvLVktWcDdrpX9wL
      RZKusKs7uo15Xy1m96GzFJWW4rX3/B5QQ3V8+qdPCKUXUpjp69Fm+7KP+XrlRnYdq2dg/764
      7Fe2LBFuYeWCeazZsp+MkkGke2xX2LRU7+eLj+ezaWs52492MGpkaQ/XaHCyYi3zF63gdBv0
      Kc7DLl9+fQad5w7z2efz2Xuqjf79++BQLrXROHd8P8uWryK9zwh8cpgty+ezbEMF3rx+ZKc4
      AQi31bFm8RfUK8UUZbloPH2YJctW4M2/2H5di3Bwx3qWbz/NiLK+BBuP8/W8r9iy9wS5xf1I
      ddsBjYZTh1m2ZAne4lH45DZWfPEZq8q3EnX3pig7BUmCSGcjG5fN53Q8mz69/GBoHNm4iLlb
      a5g4rF/XlRlxju7ayLLNRxg0qJR4fSVvf/AZO3ftJpFSSFF2CmosQEX5SjYfDzCkXx6JUDOL
      Pv+YjbtPkF86kBSHAqhUH97Dsm83/PmMAFosjMtp53R9C/pVbAx0pLS+vPLLl6natoz2SKJH
      O192P575+UsM9daw+WjrVUs7smsHnbEoLa2hq7Zrz5FaZr/0S954biapHnuP5RzbvJC6lLG8
      +tJs8rw9uS5kFg3nF2/8mukTBuJLT8fRo1WMtRt2M/3pFwgeXsuJhuCVJnqc9fNXMOLxl5jg
      O8OSvQ10X+lUiakyanstgTi0ndnL3tZMnp05jqWLll2wioTDOKUoTe1hQCcakzEitbSHtYtV
      6TEMp5+mM1UYQDhiMHXW80zMD7Jp/9nzVhqRuIERaKAjBpLi4Lb7Z/PyM1PZuGwF6vmbGQ2H
      scsqTS2dXf9uq2bboUaCgcZu1685/LRWn0TXoenMIdIG38cbb7zBpLK8rqtLRJDsTprOnQND
      Z/fCj1DLZvDKz2aS7vyu71Xiho1Yy7k/Hwew+3Mo65OPrYc3+nfIso1BA0s5sH4BjqIx+J09
      PZBgU+Is+uBNNlZ7mTAoq0ebRPsZ9pyD0WWFpu2Ktp/k8/ffZWn5fuJaT4vqMU4erKbj7G7e
      nTOfppjB1ZbejUQnW7cf47bbR17FwsnQ/ll8PuePNDlKKMzwXmki2Rk8tg/ffvA2mw+fo+pk
      zWX1OelbNoBUV9dbPNLSiK+oD960YhKx+gtWmQX96J3jp6u3bRQNHESGt7tb2uxpDB7aB9v5
      W5Jb3B9nsIryQ0GGleadt3JQMrD0wqihSE7O7vuWf/3DfMZMuw+b3NW69F4lFOelI0lgGCoH
      dmyj75jxeC653ZKUwpAR/S6MeuFIhEMbFvP+Jws42xoGwOXLYUBpAYoEaCr7TrbSfmQ57362
      nEDiO+d10X9wKT6n8ufjAMlg6BrrP/sd+/UhvPHMNJy2npzFwJmSx1Ov/Jr7+mus3XOux7L2
      b1zKnoOVrFy7ge1bttHe42Bi8Nv/9Ef+4vVfcG77Ck71OFIopGT4GXffkzw5MYN53+y6avsb
      T+yhLX0YZbmuq1i0sf9ojBde/S0DXa2caOi40kSS6TfxUf76//gtU0cUkpWdztVfGaC4XGjB
      EJoWwXaVcSdZ2k7v4O0vtvDwL15jaEFKjzaGJDNi6ix+8/qz7F61mEQPw3ms+RTfrNjKjvLl
      7N+9i91VzT2WNfCu5/nv//mvmFKisXTjvisNZIlUTxpTZr3A/SWdLNhy6gqTKyejtyjNVRV8
      s2gxB44GWZCdyqMPj+fyx0SN1/DVsv0MneLhndoqnn7mYdKdl19ijF0rlrD7TCPhQJDJT/p7
      rG/MzDcYMxMOrf6aqpSRpPU4mHSweO586qJh2my5ZHmdPdjYGT31Xt799A9UoDLqkVd7vkAj
      zo7NFYy48+c9ft904aVXWoRP57xHVLMzMs3To1XDkS0sXL+PxuY4r/yffbo7QLiZBYsWUr5z
      P5XqZ8x+eDKs/Zg3j8j0m/DEBbPK8kUsWr6VJlsd6c4ZRI7vZs2mfXga5uF/5kn65XiJ1h/i
      /a+WsXffMT78ZgApJ5fSHs9n6WdzGDLlEaYMyYdoO0uXLGD9tgP4A3OxTRnKhs07kIwI6QUj
      +e4T5tj2FXy9ZAPn4gdJT32O//ov/0a8vYZ//XIDY/p2jdJG60ne+mIxFfsP4Fi0ivF5Glsq
      T9HR2s7oh8YD0HJyJx8vWE7liTb8+flMm3U7b//+dyjEuffZXl2VhRqYt2Ahm3btQ/pzCYYz
      DIOLTZWQZOmKN1t3G5AkCemKKZOBYXDBTpJkTGZVl9j1PJoYeteUpuvvUo9lGV0Vnre7Sn3G
      xalRz3VdLMswDJAkJJP6LtpcVp5hoF/WR9/1yaX9ZRg635lJktRjv15xT+h+DVLXfOaK+rr1
      6fk2XlofkoR8uR09399LbXpsk8QVNpe26c/GASwsbgT/v/oGsLC4ViwHsPhJc8VHcENDA4lE
      z/r5rYgWitC6qUJoZ3NLSFf/uryA2fcAgATYnOL3Riyko6vms0u7S8Llvz7vIEkxhK8zPQFq
      RFyWo+c1v24YqoShCYxkkG1JzLC9EqZSFSDZZKQrFv0us9EU5PDVFLQudD2BpoUv/sbsG8Aw
      dDqaztEYdTCgKPeKv587sZ+algh2bwYDirM5deI44bgOioP+g4bg1do4dKwaT04xg4pzzK/w
      exI8Xs3mKS8K7fyFEjaXoAMlkBWBjQxpOWLxrP54nFjwakt2XaQXKBQM6Xmt4lqRvRqSQMWM
      tUNntdjhsgYZwhdBvENGj5qXJdkNHKnmfQAg9ZWQBP0uex0oPS40XlJO2ImzynzdJh5rIRKp
      vliumXGkvZbNa9cwf+W6Hv++bNlCAjGd0zuXsW5fLYoSYeOC5bSoCmq4ifkff0FTVKOl5Wqr
      rRYWNxdTB/Ck9+auu6fgd1xlkJAVvD4viuIiLTODwcOHU5Sbx7Dhw5Fbj9LuH860O8YzafSg
      G9F2C4sfzA9bCEtEqa2pAcWJqqrd/qRrGrK9p4UhC4tbB9MRQI2FaWlpJRwM0tzeQ+CVM4Wy
      ocMpzpSoru2+XJ3WewBabQWHTp/j+KmzV/7WwuIWwHQECLXWUFF5ij45aWzaXYm9YTen27r+
      ll82ifGjRnBw91YcqX2ZOXkIoDP67smkO8DpKeIXzz3Euk3bSes3itIf4WIsLK6VW3oluHnd
      DlrKd5vaSIqCPT1VWJZxYAGEeg6qulCWAxApRYBTJJEAoSYDNWbetZ58G/5BAunGAC0QF9bn
      VPwoAhkoHo4RbG0XluUf7hHKklqkS1Y1xdCRDLGkridKEGm4NqeEIugqKWFD6TDXcFV7CwnP
      mYvlClt3E2nbWcnpP84ztfH2L2Ry+YfCsjp/vwGtVqBGuYGegxgvogPiZwiHSwbd/ClSetmw
      F5vfVcMwMOrEDmBP+HHo5o2XlQ50u7jxSoFTqLnLqg66uYPrcRWtQzW1ATCO54NmLnEaigqK
      +cKDgYGoNt2jIGdfXBAydYDOhiPM+2wlAS1KwcjpzL5naLe/v/c//z2ttiI8KTmMG5rN9rXr
      OdAQZfKEB7i9b5AdkSE8P6k3b/6n/8X0//73FAsaZ2HxY2PqAN6MPjz/6zcInN3OB6tPwmUO
      oPt788Izr5Hr71J7BuSm8sXuFl544h5qti+8EHGn6/pVN4FYWNxMTB1Asdmo3lfOsi3HmPn4
      c1catFfz4Xtv48nqzVOPTu9emBZl6/IvCFb62VPVysPXt90WFtcFUwdoPV3Bos01/OznL5Ld
      02aPtKJuI0D7pd+YiosJDz7Fi5ML+f25//d6ttnC4rph6gDh9lYCnfXM++BdMvuPYVhmnJbz
      cUSpvfpS6Ff4fO6fsLmzmPn4TNI9qRTndX3Nu9J6UejxgiTTZ9AAet67ZGFxc0laBtU1leqT
      hwnEuv7tTe9FSUE2ArHgB1H1v9/n1O8+MrXxFOYw9v2/EZYV37UCPdBmaqNrTRhanamNoQPt
      4gAvPSAhkiSUXg4cAwSvBsMg0R42twFcWjaK7ja1SYSDhJvrTW0AnKN9wrBYKeZEUs1FREPV
      0IJiGTRePQx087Icjhg2u3mHGoaEFjcP+TV8negZDRf+nbQMKis2SgYMS9b8uuDwS/h7m+vD
      dlczwff+L2FZKW/8AVuB+XJc/MhCYvvmmNoYuoEmx4T1SXEQffnLkoJN8NAaGMj54jhunQg6
      5rHO6rkE+lFxWfHGMJIgaNTRloUS6TmjxqUk84AldEUoktjccdwpguuL2+hsSje1MdqzoD07
      ufaF28+yfNEKGiISt93zCGNLL/4QtZ2FC8qZOuNBanavQc3qw8HVK2hBIat4BI/eN5oN8z7i
      aKeKN7MPzzz+EN7rE/lrYXHdMPVzmyuNe2c9x2N39WPL5stWZG1pFKe0sW5TOVuPBSjKcRKM
      5fCz117G27iF/TUBmuvgiV//iqHGfjacvHpyKQuLm4WpAzhsMnvXfc2HC3czdtLoK/4+cuqD
      VH4zn+Lxk0h3KqiJCC1N9XREbPjcCroep62piaYOg1Tr9W9xC2LqALrkYvLDz/DiY5PZVl5+
      xd/rjuwka/AITu0/SlQ3CLWf4bM//o7O/EmUZTtQYy1sWb8R37gnmFj4w5IuWVjcCEy/AZqP
      72D+mgrURIS8snvQNPVirhi9g29Wn+HRX73E/kXvsvOYn/TcMn7xy/tZ+9Fc1h/KwOnN54HZ
      s8n/Ma7EwuJ7YOoAOYMm8OtBEwDQ4mFWzX+PM+djqXoNHM8r/+51bDL0evYNAO4Y3TVNmv3a
      X3YZjbCCoC1ubW7pcOjaOR9Q96H5OoAjRaL3VPFGbyXHg+QwlwDtpQ/jHNZDyMelRDpR5/2d
      sL5IuBZVi5ra6MF8Ei2DhWW5neJUDpGEC1UTaOm2OCmuHjY2XUZHSBxe7nZEcdjMNX5JMpBt
      4jWT482FaIb5PXTLcZyy+TqAash0auZZIZySile5GF0rlGm1WJCtWzaRP/QO+mZ3z0Z8aNtK
      Dp7txJXemymTxpJii7N322bOBm1MGD+Wc7W1jBoyiEjjcY4E0hnZL0sUZn4FZmkCLxolUZCh
      CcN3wUBSBGG5si3pNonMDCQQ3HgwkrABdFlsZ8hIIoEfwOhK8/iDbRBnl7iIyDCZ+sQ2xmU2
      oh6j5tAWNm3cxL7qziv+urliH0PGTCA9sJ81FWfYufILDnf6GT2sP3qwhVWbtgEQPLObVXtr
      BI23sPjxMXWARLCB7ZWdTLq9f88GsQCHK/dxvF6nOB+OHAky6Y7bKOxdRGaqh1jzGVavXk15
      xbEb0XYLix+M6RTo2LZVnOyUUDuraQycQR2T1/0Hdhf5vYvIMto419CBJGloms53fqW4/RQW
      FtIeSOeEeCpoYfGjYzoC5A+ZxEOTh+F1O3G6egiH1jVCwSCdwU6iMTejRhewbvlytu7YSW1L
      CJs3nYEDB9K3d/aVv7WwuAUwHQHS8/qSngf9CrMJ6B5WfvqHblkh7n/wUepbI6QPu5tBA0vx
      KP1IOXGUlphCek4es6ffD0DqgLuYXdTDcT4WFjeZW1oGbf5sLi1ffmJqY3NBRlkShWXJSD0e
      mXQRR2o/nBlDzMuxOZD6jhVWF9rwFmrTCXMjZwqyJ9PcxpBwnxNHXareOLrdfJ5pRCPoHS3C
      siRdLM3abBqKbF6fpOgoHvGG/ob6XHTNXI8Jaw5iurlCZ5N0fDZzyVjGQJEuttt0BDC0BC3N
      zcRUHacvjazU7m/xztYGAhEVZDuZ2ZkoWpSW1g5sLj8ZaT7QYjQ3t6ArLrKzMhDkP70CxSZ1
      ZVcwuyC7AYkkfDiuYxjmDdDbGzFCgpTHbj/KXS+L63N6xeHQzhj2HEGWBl3C3pgmrE72RcBt
      rssnAiGiHeKsEC5bXCiXSpKOLNAQJUVHdohSSINLiWMI6ovodhKGuWovkcCtXFtmc/Nw6MYT
      vD3nK4YMHkpO/5FXOMAXc/4FZ/4Y/P4MJk4aztYFX9BizyDS0szER5+FQ0vZ0ewhXQ4y8sGf
      MyDjmtpmYXHDMXeAUDNpeSO5f9o9OJw9rLB5s7hz6j1kp7pJ1O2jSi7iN8/NoPXoehZu3kVJ
      sIHcUU/ywIgCnFYsnMUtiOm440rLJ0dqYu47/8qcJT0c7xmoZ/HCr/hiyVoa2gK4fF5sgN3l
      IhqOcfdzL+E+s5F//H/+iap2cYIkC4sfG1MHkHBxx6xnePqR+2g518MHnb+AJ599nl88+RD9
      +vcncvIQ1W1BjuytJL9fP87UtHLHzGd4cIDOrhNJpFOzsPiRMZ0CyZLO1qWf0hz38sSj97N+
      8cfUnD+bOaffaAYXZjH/o3fBmcnMx2fy/Ow7WPbVJ/hLxjBzykDqD23j0/dX4yu8k1mjBWqH
      hcVNIGkZ1DB0wsEA6nkFSbG78Lqd1xDsdO3Uz/2Axk8+NrWxuSR6DUmiET4QyVA2lwubW7Be
      4XCjjH5UWJ3WXosRN48GJdgGrbXmNga4A+I1FFU2EIhcqIkO4iFxTJYtNhFRYbbMALJXkBxA
      1pHsYhm0/tBAdNU8UldPiWB4zPvTrkmkBq8t3W3S1pIk400Rh8leTyIdOq1nzb8dnF6J3NIk
      DuJoF0cmqr4ImiwIPY4asPrfhNX5nvyf2ItGmtokdu4mtmuxeUGSAUVi7V5rTEGPmCsNuj0B
      XvH7LhZwIIqTNDIbsOebp5kxNB0jIY6BaVM9aAnztudk15BedMbURgq5sB0vMW/TZf82dQAt
      2sHKBfM42aYzfPID3Dm8e3rbL7+Yy93TnyFTauOLrxexf99hUktGMeORB4kd38iGynrS+o7k
      xYcnmTbKwuJmYeoADcd3ckbrw2uvTe0xlr69vQ1VN8Cfy1PPP4c98hYjn3yBrOh+3j8U4ZXX
      foWSRH54C4ubhek419FQR83Zg7z71lus3JF8SHO4sxlvWjE+p4LbZb5Dx8LiZmLqAN6MHAYM
      Gc8Lsx9gf8X2pAv1pGQRaDtNMK4RiQg+BC0sbiLm4dBl48gIHuCDL1cwcvRt1NdUUVXV9Z/a
      pg7SCPLJnHdYXH4IFZmUtEzsCqTkDmLqEB9z3nmLeWvMjziysLiZmH4D2NwZzHj2FQD0RIyK
      rWtpOp/gLb1gEI/98u+7KYv3zf7uxHYHo+6exai7f1jjFBvYBTMom0sCp1gGleUk9ovKMkZC
      FOFlINnEuUGNUAi9zXzxz9A0pDSRsmagJcSLiLouowmOZAIZSRHnBkUCBOp4Iu5ADZvnNZV0
      HSkhDobrkmbM69MSdhIR84dBijlBEFV6xW9u5XDo0LIPiaz81NRG8ki4Joh1cpvmRsL85kdq
      MglX5ZnX54jjn7JHWJ9eWQKd5u2yjR2Na9ZMUxsjnqDhb/5FWJ+qyxgC6dKZ2UH6wGphWeG9
      xcJ1gKOhLBoS5meSuSWVXor4ZaElscE+mYdUQcMvfDkZ3WoyHQEaj27ly9UVYOik9R/Pzx4Y
      d1lZKuu/moM8eAZ3DO7F/rVfUH64heySYTx03yRSHBLB6j28t/Ycv3pxRjIvaguLHxXTV0bO
      wAm88caveWBMHnHtysUmo+MY+08G2L51H3EDaurOceejLzDIWc0HX28EQ2Pvho3Eaw9T2XrL
      DjQWP2GEEyY92srq8lNMvfPKswGq9laQf+eDpHfup6G9S++XJIWy0XcQajhJJBpid6uLZ6f1
      YeOmSuugPItbDmEoRN2xCrTicRT7rpy/7Nq+j1OpcYKnz1BZ03Th/4/Hg8gOD/GWwxw/cpJ1
      /jCHj7SizxiKciOPlLGwuEbMt0SqQbZu2se4ma9f+YmSaKBR7stzjz1KrCqT5UdOUhBqZf2K
      hTgjLYyd8ghnK1cw+We/YtrgNDrP/ZGamE6xOwkVwsLiR8J8BJDdTHv2l7hTvWjxMCvmz7mY
      FWLQbTz3yxdJ83sg4wGeH6ph08roDCdwuH2kp/qI951Nf6cflwI//4vfYnNem0RlYXGj+bOX
      QXGCMkA8rXLmpCA7zP09UZ1J4kSuqY2k6PhzWoX1GTZDmMoypmYQjhUK6lNIe266sL7YkmVo
      VVWmNja7isMnXpnvEJyzBdAcTyGomuvyCUOmU5DJASBLjgkPW0x3Bkixmx8WqOkK4bj5oYMd
      mp167aKNMCvE2ZNHaAjCwMGD8bsumb7oEapONVHUp5Bwcy1Rm4dYZ5ReJXnY9QSnjx3FSCuk
      Ty8/wcYzHG02GF1Wklxi2WvBANQkfFgyQDa3k2QdWWSDgRwTb3A2HFEQpCkhHEFrEIQ6223Y
      eonTomhuG5IgTYlsgBRPNgLe/D4pGDgkweKVYZAQ6yzJafyShlMxD41PJFGShkzskuwSpq1r
      qtrJ0g0HCdVX8umiTZf9VWL36kUcrKlj5dJltHU0sPzrDQQB1CAr5n7G/M3bwNDYtmYjHy/6
      Eu2WHWssfqqYOoAs23G5nLicTmy2y94csouHZt7ByvfeQe8zkf65vm5/dqfm4o8GaI5Gabb5
      KDRfNbewuCmYOoCBBFqU5vYITveVQ6fN6UWLhrC7HFcOmIqHIYU6ew8dxpM24Do22cLi+mHq
      AIGmWjR/AWUDS6ivOdv9j4bKqm++5b5Xf01g3zrOtEZQEyGa6hsIRLr2geYOGMT+BcvIH3aV
      9OoWFjcZ0y+ikjH3MlbbTOUZiWcevYellybHHTCMwmH3MKJvCcW2yXTiZfSYfA5s3kp01FjG
      3zeJvMw+3PHQNIbkOLDffb/wS9/C4sfmlpZBw9/OJbLWPDmubLPhSkIloSgBLvNLjZ3OIXq0
      QFCfRmZxnbA6LezEUM0VkGjETbDDb2ojKRJZ94qT1UpuN1z+nXY5TXVQKd6f0RnwCW2CCTcx
      zVwNixsyHbpYMfOgCxMW+O0hvIq5hGsYMrEeYtYuJaorBC6RZq8th8SPjGQzkAUPrSxLuDRx
      zqGY0YSBuYym6TIJwU2VJRUjRRziq7Z5McLmN0NNONBFMqFmoG7eIqzP8ewz2Aabp8nWDx1A
      q6wQliVhIJJBbZIGgkPrFEMcog2gJxEOrWo2osYP317rkjVc8sU9CqYO0HRsGx8t3owsKYyb
      /jMmDex+0MX8//WPFL3wOukn1/NV+XEUQ2Xk/c/QJ1HJguXrOdnuYsoDD/PMfWN4/3//O+rt
      9/DXv3kEu7UgbHGLYOoAZ6uOUjJxFncXB/loeTmTBj7W3cAwMIxONmw+wbOv/pZe2mne/Gwz
      E377DC+4nSyvyuDZaaPQIqcJuybjjxwhEJ9OhuuWHngsfkKYvovLbr8XTqzl04XrqO+8yvmy
      RghV8+P1OHB4fNhDHQS6ZUIxaNq/BdfAsQxKlaisF595a2HxY2H6KranZDJ99ouc3fMNK8/0
      6tlIysDvaeVUbSt67CTx7AIy7PDdLlZDV9m85Qj1tBAINKBuPcSk4tuv+bAMC4sbgakDRDvr
      WPzVt4TdOTw6fQQHdq6n5fym+LS8fuT2LyXd6eWhWdNZsvJLKpRUZkyfjhNw+rMoykvB0DSU
      vuP420dmoCQaWLj4IAndQLE8wOIWIGkZVNdUzlYdIXBeAPGm96I4P+uGavvBFR8QWmUugyo2
      O/4cc+kSIJHZiW4TBFM15hE/V2RqI9kSpPY5IqxPbUnBiJtHQqo4iSOWHP2GOMGs/e6pyEXF
      pjZGSxPG0UPCsgJVRxE9FolIClrCXJXRDFl4rhdASHVdtlX9StxyDJdAdQIDRRCgpxtSN+Ut
      6a9RWbFRXDo0WfPrQrRNouOUuWSkOFWUlNPCstQ9CiTMO9nuDpLqDZjaGEacSE2DsD68dYie
      bZvPiy9TIOHqIJ/MEVanl69GEzxEUtlQbM+JzzeTP5wJhnk6E0dDMUrAvO2G0aXNizjZ2QvD
      EG2UEkulsmTgtpm/LBK6QvQSqdvUAdRYgH1b1lMZTOPFGZOJtJ7my3nLiPtLeOqJB0lxXLy4
      2iNbWbR8M00RlZK+4xjTL8w3G6pI8/mYMnM2zqo1NOTexbjsFlZsaWLatNtxWtMgi5uMqXtq
      qorDk0pbSw0YGjsXf0Pv+59nvL+alZVN3aKv8wdN4JlH7yJ3wCheePoe9M5WBt89m2ceHsSK
      BeX0GTGaXd8uYs2ydWQN6o/DevgtbgFMHcDpTadvn97YJEBPcK5OoX9fP6UD+nLqdK359gNd
      J9DeQm11A56sdJSUIibkhdjS6mNUUaZos5SFxY9C8muykkyKN0F7h0ZrSzPpGWnmD7EW5+C2
      Zfzus/3MmnkbhhbgQI1Obxo42xaxUqRY3BKYfgO0ntnLF18uY29VHXMyipj54Dje/v0/g2zn
      uTd6oyYurnjJig0kCeX86cmSw8vEh2YyggN8OHcR03q3kTrhMablnmbOkg0UPf8ALsHJ7RYW
      N5rvHQ0aazzOZ0s2ED9/aNjoex5nbL/rexBe82dzaf3SfFO84jTIGCK+BLUpGRUoF6fXfJO6
      YcSJGeLcoHh1ocZm83lxXS8VSBerJFLZUGxPPCssqyMJFUi5ziqQLlCB3HJcKIPKko5HkBv0
      chXolg6HjqyaS2Sd+TqA5JZxjjUPKQaI1wfRBedVaS1FqI2l5vVJBqm+DmF90ZgLTTe/+bJs
      oMji7MmqlpxaLQkmlpK/FbnouLAc/7PzQTavs/rjjbTsMC8rZsi0JBEOfdKQEfVCqRynt2x+
      2lDckGnQzSNwZei2VmCeFcLQqK86RFXQzaQR/THUGEf2bkPvNYohvS976KLtrN22j6Gjx+OX
      2qmqi5Hv6mDl1kMgSZSOmcqoEh871q+hNuph8p2TyfYJOkdCGCcuSSSXaSKJsrMZCEYAACAA
      SURBVLpeoCIjI8nMFhLCg+YMXVhf1+spmfrEIcwGBhjiQ+uQFSTZ/I1sSMlkdJaEC1xddpfn
      bO7ZJrkM0kn0wSU2pnco0l7PwcojbNnddUp886lKTh2toPxYD3lxQo2sXLKUVbsOE26rZsvu
      wzSd2kMoYwj33H03A/LT2P71HE5KvRlWoPPZZ8sIJZPOxMLiBmLqAJ70AiZMGINb6XpQs0vH
      cPug/KsOtDn9hmKvPUxN6PyApmucPX6Qioo9NATi7Kzu5P7xQ+g/Ygre6BGaO8VL/BYWN5Lr
      ujVFsqcyYmgu+/aeP1BPksnMK6RPnz6keezYDYO4YQAa6MoFxcjC4mZh+g0Qaa9n374D1J2t
      Zs/RMxS6Yuw7Uk1tyMOpwemU9Eq9YsbVe8BQ1i1fSWdBLmAQCXTQ1m7HkZrLlFElfPPNt5Sm
      dKLnjSUrxdoYY3FzET6BrtQ8Hrn/4rFBKaV3MgOINhzl3UW7L8igY6fO4ImHJuLyZPHkcy/T
      JmeS74pwp6f2wm/Lpj6O6+hh2hMOnh5YissKh7C4ydzSMmhwyYeElpmvA8g+Gc8d5glRAajK
      hIi5v+sxD3rE/NwrSTJwucSb4hMFHehuc9mutTGLmirzEGYJgyyB/AfglBMomCs8DlcYr7/J
      1AagPv0hRLNjX2kezhzzA/4StQ10flsurC+oy8LIgKDqJiJIxuuUVfIc5tG8miGj6RcVLoEM
      ahALdRJUFbLSfOhqjKbGZjTFTW5OOsolcqAaCxFKyKR6nQQ7O7G53HS2tpCSlYfLBp0tDWjO
      NDxShOa2ILLdTVZ2Bg7l6h1tqBJ6XPCdEJeSyq6qxHxIMfMO1DUJQ7BnoEsGTaK+1BByqnka
      j0QolVbV3HklDFJs4m2kMgZI5g6gJ5zI4TRhWR3nziKSE9NG9iFtmLnzJpwadru47elJLOJV
      aU7aBIcc2lDJsAn6XFeIc3GPgrkM2lbDsvmf8uYXSwGd0xXrWbFxG4s/fpOtp7rvEY62nOCT
      TxbT2HyWz774hrr6o/zzP/wtaw82gx5n0Zt/x5tLDrB32cfMW7GZlQs+ZPmOKismyOKmYi6D
      ZhQy7aFpZLi6FmyKx9zLC7MfYWieg+bO7tMAX/5wxvc1+GjuPPqPv49Ml0SvsjGET1WidR7B
      lTPm/PFITsbeNY0n7ruNk6erBYO2hcWN5Zp0SMmIsezD33PIM4mHh18ZB5JfkE9TQyd5+V0H
      LLi8WSSirZzcc4K+4waet4qw8ov3+f28csaNHCwY1CwsbizX4AA6exe9S0ufR3n10UnYLtsM
      bERbWbXpCE8+PY31KzagAZLdzWBnG1+csjMi67tH3c29Mx4mx+PC5RTvF7WwuJEIw6G/WrIZ
      Q9eZ880mhqXk0Vm5lD9UwuBR42g4fYzE+VMvCvv0YeCkaYwenIsS2Uy7lsHwoQMoK1KoPpzA
      7vdw+0AHedJwtIIiJr/0FOt3HiVYOAGf3ZJDLW4O31sGNbQEwXCE737tdHtx2q/vhCa45ENC
      KwQyqFvCOVYccWg/1Q85Zn5Kh6GDYQhCiiUDm0ccwpHo24DhNVckmqp7c2q/ONGA6CgiAL8c
      wymZx1S67TEy3OJI1t1tJcJ+6DuxkOx+5meJGfE4epu4vurNJ4WRus2qmw7NXMVTJBWf/SoJ
      3M5jMyRcRpIyqBmSYicl5cZOYWSHgd0nuPl2Az2YREyRLn6IJNlAFj1skoHiEevyCUPDUM1v
      qlNXyVLM264bcFbzCutT0DEEoSWKriYVn9+h24XRmaGKSnyVIVMbW2kffC//TFhf9eZ5JGLi
      tRVRy4O6jb0xc6dMx6D3JZdmWma4rZaN3y7n/a+WADrNtTUE4xr7l77NykPt3Y3bT/H+vDWE
      wq18+e7vqTgbJB5qYs5H7/DBR4sAWPrB2xxtDdN44jgNoTaWfPoB9UFoOb2T9+evFVyehcX1
      RxANms+YkQMJBwOATEZuKke3rqf8SJS+eZdNJ7QE7Z1BZE86o8vyOVBZRaD2EKpjAKGaozRp
      kOo1KF+1lhabnyy3g5aaKrZt2cS2HbupbTV/m1hY3AiuMRxTwedPoyBToabpame2Sui6jizr
      HNm1nYiRwB6rZeeJABMffYE7h+ZRPv8DKqrbkRQbvpQUfB63dXqMxU3BPDdooJljx07Q3FDP
      kVM1KMEGIjYHXodGe+DKOVu4o4HKim3s31/HbdMnUD5PZvidfhypo9i4eTe5jTHw55HisRNL
      6Ng9fgYNGYGjvp3djZ037CItLK6GqQNoiQgh1cFdt42iNRClLCudhpNn8Q2axvj8dt59ewGx
      76JB75rO9DuG0hnSueeJFyhMd+CePZv+JUUY+jCyTjST6Y1x+GQdZXc/zpB+eZTYZpDpBjl/
      CDPvEcXgWFhcf27paNDIlg+J7jCXQdEd6MF+wrLkmB9JN5dpo5qDiPCIJIOMJDbFtyoKcUHU
      nBpxkxCcEWYAIV0s1rkkTZgY1iZpOAW5MwHWRTKFKtA4dzPFdvPvtqg3nYbew4T1ZQ3OR7aZ
      z8Zbtx+j81CNqY0h6WiCyFkHcOnXqzAaNBGLENNlUjxdGqyhxmgLxEhLS0G+5AZriRgxTcLj
      tBONhJEdDiKBTlQdZIcbvxM6Izppfi+SodHREcKV4sNpM3konSClCDY5x2wYdeK0IeLcCxBJ
      OOlUzSVHGR2fLJbsgtFUYoKMCFISJ2gZgCeJzBHflWhGwrCRSIidKZDEZvZ4Eud6RTsi1Naf
      FtY3ZPY4HCnmGr9xpg71iCBVCxqpAln5cgQyaA3ffPIe//xhl4xpGDon1n/Jr/76n2i6TOMO
      Nxzk/bmLaW0/x0cffsHZmkP88z/+M6tWraJ8zzFqtnzMK3/7O5qjKtFzFfzHf/9f2HKq+Zoa
      a2FxvTF1AG9GIQ/OmE6mu+th12LNrDtl557BVy42pPQexe3FUebO+Zw+t91Ptlsmb+A4Zs+e
      zcOTRwBwe/90DtZHOXGylWFDi61AOIubTvIyqKGyb9liSu9+8CoPrkRxSQn1tR0U9ek6TbJ6
      3wbefvttFmzYC0DxqMGcrThKbShIXpo4mZWFxY0maQfQVZVWTefgio/Yvncv5duOd5tXG7FW
      Vm86xKwn7mbDinI0oHjkXbz++us8PnVUl1HKALyh1TSEC0j1WBkhLG4+4mjQxeXE4ipzV+zm
      F0++yn2GwaZBaykb5GLJwq9Rz0eD9srLpXjMPdw2PA85XE6bmoY3fIo//OEPpJSMYnppGf2c
      PlJKh9CRPYisdgkt1Tw4zcLiRvO9ZVA9EaG5tRP9/M99aZn4XNc3OC6672NiB74wN4q50I6N
      EJZlc6ggmwenBaNe2sOCTfEYeOzmUZ4Aqj+MYTdXLRJhD7EO8z26Ega+JPbVJjTb+RPXzUtL
      hr2qR7hVtcQeJlOguIQ1O3UJ8VR37DNjsDvN1aloYwfxNvNITyMUJnG4ytRGlgzsl+yd/t7R
      oLLdTU7ujX2Dy04bNr95slMjYkcRbmQHV2oAxW7uAEYHJGLm9emGREtcfFMLi4/gyeghheQl
      dNQU0ChwADDo5WkT1tcZ9RAXrGF0IXaCMkMR2rWqbo4nzF8WkNwc++wXm4TH5hY8PoH8GeNM
      bUKnGzl28JypjUNSsV/iuKYOEA+3sm3NSiojmfx69v0Ejq3lf8zbQ0G6i0kzX2Rk4SWnwHWc
      4eO1p3ly1p00VqzmsFxKfuc+NlSew51SzOzn7+DD//x/o2bm488tY9Y9ZSxfspRDh47jLxzG
      w7MeYVC+eZoNC4vrjakDSLKDgpJ+7Nl9EjCoO3OM4fc/x9O35V5prMZobGlHB2LBdtr0Fo5v
      P86Dr79BdiyIHQ3N15tXf/kq2778IxtPDeTpF55j/ttvM+apF+gjztZhYXHdMR2h7C4fvXKz
      zg9PBgndwZF1n/OHtz/ibIdgNdSRwr13DmHJnHdYuuP4hZQ1kuxgUFkJ1bV11+cKLCx+ANew
      DiDRd/LT/Me/+i13F3ayYs9lD7CiIMUixBIqbR2deF1u8odM5vXXf05k10IOnp/GGrrKmTN1
      FOT0MIpYWPzICGXQeV+t5HhtC3MWFzAxJ8K6vScJhDQefspPfX3dhT3BvtRcxhepfPDmmzh8
      uTw2OYWtK+ZxvCGM1msM/VJl1jWf4E9vv4Ursw+zR+QDKp4UP4I4KAuLG8b3lkHjrdWsLN99
      ISvEoNvuZnDv6zuRjx/6gsSRr8yNok6Mg32FZTlTw8g2c1ky0Omnrc38GgwkOgWbswEKRlbg
      STdXbzpr82k8WmZqI2HQx18vrC8Q85DQro8M3ZzwCmXQgGEjKthfrCOhJrEHubctLAyLyZsx
      jsyJ5n0VqW3l1Jw1pjYONYZbvRjFekuHQ+sbvsXYbL5XWNclYhGx/BdP2IWxl50JN+0JcTRo
      gVssS3pcEWwChwvHXHQI1h2uJ4qk4U4iHHpLsEAYDdrf2Uqu/Wq7Ars4qzpZFhFH6j7ubMEl
      COUOaXZihrmDe4qzGfhXs0xtgtsP0vLZqgv/Ng+H1lXOHt7FwQ4vD04chqHH2fHtAvbWJnj4
      iWco8F/025bqSs7FsxneP5fGk/uo1TOo3/stJxujyCkl/PzJ0Xw5fxeznn4Imo5xPJLB6H7W
      d4DFzcU8OW5HI1XVjRw+WgnonFg7l23Rgbz8sxn47d1/6iTK2q27UYlTUb6euKazv1XhjTfe
      4PUXpuOONVC5YSVLdtUSbDjOgdONN/K6LCySQpgVYtyYoThkQI+zr6IWr3qKr5fvRFe6D1ne
      gv7kBs5SU1fPyWg2A/JdRGoP8+mnn/L5ym0A5I68l/ih9XREk93gYWFxY7kG/UXC4XQxcOwd
      jEqt5cNvD3XL7CwpqfQp8VKxcw/pvfvgBZzZfXnwwQeZNuH8tjjJy+39PGw/3nA9r8HC4ntj
      6gCBplOsW1fOyaOHWbO7itvvHceeVSvZc6KNvoWZl30mSZSUFLF781YK+w8AIN5Wy7Zt29i+
      +zDffXr1mzCJpoodBMXJ1SwsbjimH8FObwZDx93B4HF3oHhSyckdwDPp5wjrTrJsbbz39sKL
      WSHuf4pxpbfxm7/sT3pWBjZZ47WXXiIU05BsHpSUNH7+TH9sTh+v/If/gubO+lEu0MLCjFta
      Bo2u+pTY2nnmRnYJCsX6t3pmIIYgOW5MsxPVzKNBJXT8DnF4sjsJGTQScwplUMOAEwnx+kqe
      LYRPTuZ4J/HtroyKs0IU2gNkKOZh4e2ag4NxcdvHOFuxC9qlGeKN+rLDhquXeX3Okny84y6u
      JwiyQugEWhpoidnok59JQ/WJCykMc4oHUpBxyflWiQjHTpwgFFVxuNPJTNGoO5/sypuZz4DC
      LM6eOEprzEb/Af3wOsQ7gnU9gaYJHjYbKG6xAxhy1yk3ZsiATXDOlnQdD3UyhC3qsokY4qh1
      TbgXoGsRT5T1GUCSkmiXIaELFrkkJDxJbEFIZpdCV8oXQd8n4sTPmquL9rwsnEUX5XdzGbS9
      lg3fLufTZWsAg0Q8RjgcpvzrD9hXf5n3d57ls4Xr6AiHiUZjJOIx6ivX89XmY0RjCU5uXczC
      LYfpaKqlJWQlwbK4NTB9tXjSe3P3vXdxZvl2kBR6lw4jv7iRDWv7MmXAlUONw+Mnr6AAn9tP
      Xm4G7vYqqpv6MaxfHr+bV8nTf/UfyHFYgT8Wtw7X9jQaBtVbl5Mz/iG8PRxvGm5v5PDBgxw/
      3XDZ4XcGMVnCZT37FrcYpo+klogRCASIRaN0hiLoiRBfr6/mkbtKezwrNyW7mAmTJzN6cHG3
      giVJZlIfP8u2HKaptpomSwO1uEUwnQIFmqrYuPUAuV47324/xKMTCxn/wBNk2yHacJSPF669
      KINOuZ8RhQqrFi/Gm9aXaQ9PxFswmAnpaSDJTHzqNWyrl7Nmq5N7Hsz7US7OwkLELS2DJtbP
      R924yNQmLtk4LYuD6tI7UrGp5mpKQHPQLgh1tkk6xa52UxuANsNBXDDDlHQZOWGuhhlINGri
      5AN2SUMRKFhd5Yk5pLmFalFvJUa64EyygKFQJZCVAW63B7BfB3VNQyJkmPentyCTjEtOuP/e
      WSF+DOwOL/aUbFMbNe6k+vRgYVkOe7swyWxAc9KkeUxt7JJGMWIHqIv6hfsGPJJKuiCbMYBf
      qO9Ds+YgKoiqT/YRqzNAJE7aNScJgX4ZMKAxCZEzotvQrsMBKTFDokkX9PnZAIlzey7829QB
      Ih11fLtwAQcSufz9K49xbt9KPl5xBAyVmS/9hrKcSyprPcHf/9NccvKzicXsPP3KS3RWfMPi
      nbWk5fbjxbtSeeo/LuF3v/uvqPvnc9h5Jw+PK/hhV2xh8QMxHaOdviwm3XUXqfY4oFF94Bjj
      nnyFaQNk9p25LEe+oZPRZywv//Il+vnC1J47w7K9rfzFX/6WV599AKehMWJIHus3HiahJlB1
      8XBtYXGjMR0BZMWO2+3qGsQMmaLhg/l8wbvE4xqzJl+Zw6fh2Db+9E41Hm8RwxwhHO4sPHaZ
      7/zMU3Q73tYKmiSt+ykFFhY3iWvICpFg17p9TP3567wwJY+1FaevmFPmDhjPa6+/Rl9HLSea
      7Rid1dQGYkQCARIAkp1JI/LZVHEqmWN7LSxuOMKsEPMXrqWpPcScpTt5+KEpLJj3HprNzwMP
      +ti9czva+ZlMfk46ztBJ3v3jn3D5i3l02ABGpIZY+vG7KFmDeG5KFiW5bnKHDKJ43Wb8PvHG
      cguLG833lkHVUAsHjp5GO/8qz+s7uHtw3HVAK/8GfcsyU5uo6mRf8yBhWQVyGCfm3x2tqotG
      waZ4m6wxNKdaWN+p9hxCCXMnd6HhFUiJAHIS8mab5iQiOEtMsiWQneLzmE/HfIieimxDwieQ
      SgOGzAldHKg4xRbCIdCoZFkX9oNqyLQJNs470fFd0uffWwa1eTMZNTrz+/48KWKRNqJtp0xt
      ZMXBpCJxZGki6ATdfMbnirpJiZg/kLIjgXfEGWF9gw7HMQLmHzqaLqNqoltg4LKLMzmkR8Vp
      UWypDbj7HBCWNaF6BJJAvoxEXKiqeX3tqhM5ai5jA6QpMWyCcGivI4zbLj6bTYSqKaiX9JNp
      76vxEAe3b+RgMJVnHxhP86l9LFq1FXf+CB57aCKuS1P6Bmp57+OviBgKabmlTL9vLCu+nEvZ
      vS8zvHeI5UtOc9coO2/OL8frdlI87A7unzgUuxUfZHETMX381HgUXXbR2HAGtChLFq5n6s9e
      oW9wBxurAt2N40E67EW8/NpLpHbs4UhNJ8caWtm3tRzNCHL86DniHXW4y+7ntV88wpnt62kX
      p9m3sLihmI4ALl8mA0qL2XyiHhQHowbn8OWf3iYlWo+e2cD9pd3z5Dcc28Zbb1Zhd/Xl9hwn
      7vRCSuR6DjX3uWBzYN18/nDYTWbZXaS6ktkSYmFx40h+AiIpDJ/2LH/9l79h4sAccjKu3A+Q
      O2A8r/361wzy1rL/dDvIdm6763a2rym/YDNs6hO88carBI+X0xS00qNY3FzMZdDqfcyfv5w9
      J87xYXYRU/JirNx2hIYOH7+ZeeUHcMPxHbz/p3N0tqk8Mr7rA9CVWUpG6BNO0WVfuWEB75zy
      ELDn47M2x1jcZExlUMPQ0bQLif1RJNB0HUmWSTQd7x4Off9sxvZNxzC64v9lWcIwjK7/1nV0
      JGSJC+XJsoIkST3uK/iO8Ldzia791PQCZMVBalap8EKTUYGCUTeBiM/URnYkyJkkVlLUw3k/
      qgoUuI4qkPs6qkBHklCBBjlab5oKdEuHQ7cv20T7t1tNbep0+BuxtM1/88qUCAaco5qHfYJ1
      AAMwbEnEMSUR3litRdmnBkxt7Ej8lUssN38VD3BUM3eUQTY7jzjNrw/g95FONIEuP0xJoUA2
      D3VuMhJsTZhfH8D99nQcZm/C70gio4UQo7trm75+dDXC4T07ON2qM2b8RHK8Kjs3bCSW3p/J
      o/ojX9boQNNptu86iDdvEGMH57N363rqOhKAxMBxk9BaGhg4uIxQwwnabHk4O45yrM3LhHED
      0QIN7NhRyZCJ95B5/sXZlc3Z/C2jGwahJALr1CTSamiGRELwWWQAunp9pm5RQyIsWEyyAZog
      xr2rLBAla4nqMloSB+mFDAld0FexJPoqbkjEkwjCjiMhJdHv1yshh3yV/30FgZazNIW8FKdH
      +XLhGg6tmsdxI5/AnsVsOtP9tauH6vj808X4CvvTXPkta/Y10GdQGYHKffhKR9ErTWfNyrUk
      dGg4upk9Va0c27uNld+uoCGoU1+1i9XLl3O24yqNsbC4AZg6gD+nP3dMGkK4tZmUVD+HKgNM
      ums4d44vpeLA6W6BBR21VcRyB3Lb0IFMmDickwePkJWbR4Y/hZz83qS6exhsJA+9C9Opq62n
      9nQnJX3FueQtLK4n5pviY52smPcxZ+T+PPHAaGTJQNdB1zRkWe42SEqyjK7pXXNkXUdWLh+2
      uz6KwUDTjAvTp955vag5sZdGZx4FXmtNwOLHxdQBag9sZFuNRGkvH3VNAYaPyWb9so2s2HyC
      ccNKujmAP78/aR0nWLtpG8tXbqd0xNDLSvOS7gqxfXcF2w+1U5jflRIwLa+AxkNH8ORkX2OO
      FguLH47pR3B60TDum3CWzvY2dGcaI6c8RqKignjZUwxynuXdt9d2S477xDOPU3n4JIGUVDQ9
      DtgZM30mLk9XVU889wL7Dp5kzEOzKcv30z7xHvBn0/ex6TizizCyZ+FIv/EXbWHxHbe0DBrc
      9DWhLd+Y2kQ1O5VtvYVlDdaceATKxoGEjx1x89Pqk+2sflKCFIFs16obnBMoWAowzSleB9id
      sNEgWOfIkiTKFPE0c76KMBzaL9twSebqlAOVNMzPEQPoJTtQBPcmZChEBGqYTTJIlcRJBpKW
      QQ1DIxwIEE0Y+FJTcSgQCQXA7sXj7P5TXY3T0dGJZoBid+N1GnQGu6Ld3L5UvE6FYGc7UU0m
      NdWPvYfMcpejOIM4Us1PSHSqTu6Niz+ew2EFXTfvQFkyrlvq20xJJ1M2f7j9KKRL5nsGJAzS
      lKCwvn66k2zJXJd3o+GVxc5UILuFkrEKgt0VkCJJjFWSibhPYr+DLiPqBQcGOYLMH3ANDtDR
      cJRvFm1FV8LIeRN4oH+CxUuXoI58ldfuLulmGw82s628nLOnj3I8Xsqzwzv56qDCsMI0Bo2b
      Sl50P+8vO0Rxr2zGPTCD/pnWpmCLm4+pA/izB/LcL8toOr6RTzbUkzP9YR4NVjOvB63elZbP
      Aw9P5+v3Gxk56yFsxxcy5s57mTEyF1mCt/5HOc//1d9R4BQv6lhY/FiYZ4WQDQ5vXszyvS08
      /cLzwsJO7lxDa84oZhWncvBQmPIln9O4J43b7ptFp81Ohs2SOS1uLUwdoPHoVpZVJvj16y/i
      FszZE51n+HZHPY++/HCXnOnwcOcjs3hkVC8MQ6c5U2b1wTqm9fMSkX09L4xZWPzImD6FmmYg
      R8/x/lt/JGvgbYxwNrJ6Tx0JYzErGEWkvR5V6/pszM7NRNIjLJj7FmlFo5hUUsipdfP5wzY7
      o6Y+yt0vvs7qhV8zZ5eHGU8+QuqtnZXR4ifC95ZB9USUlvbOC3KZx5+OzyXOAHAtRPd9Qqzy
      c3OjmBvjxOWLbldSFfURFahAjaqLWvX6ZLboK6t4BepGHFl4/JGEgccmVoFaNLcwK4RD0vFK
      4jyjh3WHOHAQsSRsM1R8iEN1CxSXIKtplwwaFcigLsmgt0AGjUE3YfZ7v4Zlu4vs7Bub20fx
      2nFkm4fvqkEXrWG/qQ3A9lgabYKHLQuDout0plXCsAlT6EqIt+TphsSWhPj65CTaZRgKJBFZ
      mkxZUhI2dYbGloQ4hv8BRwpOKYloUAEeA3yYR7u2GlBzSctNn4hwWzVLF66gIRSnbNLDDPM1
      snD1TkJxhUdeeIm+6ZdUFm3g00/Wcd/PnqBlz7es3lVFau+hjM1tocoxnvtLQ3y6ooZnn5yK
      XbY+hi1uDcxVIIePKTOewRaoZM7KCsbMGs9TvxjN6RX/xvZjrfS9vddFYz1Bc2MzHQ0nWVHR
      wAuvvIbXUEEPsGbOApZV6gy9/3ls1sNvcQthOu64PGko4bMsXbWbSXdNJjU7h5bDG1lTncrU
      IT0fdB3qrMedXkSG247T48bpzeKO3rCuLY0RvbxWDgiLWwrzDTENx/j86w3cPvN5JgzK4tye
      lXy9q4OXf/lzevl6HjzcvixCbecIxFXisRjxcDPbzkmM9zVS2RC5jqfsWlj8cEynQE0nD1DV
      0Mzqrz5m74DR+E7sIhjM4uP33mL4nTPon6FcyPKc4tbxp/pJ61XKPYOPM+etP5JaMJgxWU30
      njiT+0paePeb9Qx5/kHsSQRkWVj8GHxvGTTeVs2qTXtInF8HGDh2KmW9zSMpr7mOI/OJHzc/
      I0wLOWnfNkRY1uokVKAMIDuJo9uTOdpDJwmZUDIEmkVXOQeSON1dIZkkTyJxs4sE4v3Tyvkd
      22Y06XG2JzqF9d3ryMAhUIGS6U8P0F8QgdtuQO0l13ZLh0O3LdtCx7c7TG0kdLxJpMtojKaS
      EDhAp26jXZBdWDXgRBKPUQLxDSuUVEYo5tGZugG1ujhwMF2O4RZkT3ZIKimKuK8+j2YJHWCY
      HKNAEHkZNWRadPEheblyBJE20q7bCQnunx2dnCSuL+lN8Vo8yObl83hnzmdUNYVor6nkg3fe
      Yu7Xa4lql3W2YdB6tpKP3n2HRWv3EDcMavavYe7SrV3bJINnee/Nz6mPqSQCDSz6/APe+2g+
      Z1rE8eIWFjcKUwcItjfgLZzA43f35ev5y1GVdJ74+asM03exZF9bN1stUM3cz9Zxx2PPktmx
      k2/KT9B0eg/7N++jLmFQU7Gd46fP0Rrv4JO33iP/thn87JGJGHHxyqSFxY3CPCtEdl+Glaax
      a/MOigYOJT3LxbrPPmD5iRQml3XPDdpedwZn3yEUZ/goGz2c2uNHQHYwli1GlAAABBdJREFU
      aqiHvUfa2FsPI3rZIVBNszKAPr4AK1aspTUs3qBhYXGjMHWARKiRT999F7nsIR67ayCyLZW7
      ZjzKlJI4W4+2dLO1O1zEQ2FUQI1Gcbq7Ugymlo6i49AWNLsXryKB3YUR78SWkv//tXd2v21T
      YRx+HMdOv7LmY6QrLe02laqCCjoBFQvThBCaYEKFK4SQEPxRCMTN4G4jA7YxpjA2KKwrEYjR
      0k2DDq1dv5ascZs0dZLGjn24mBDbAJ9cdGou/Fxblv0ev9Y5v/M778tQd5DZuexDezkfHxme
      CbA0Pc5UTlC7/QeZ32a5lvme8R8zzBs1wg8cbAn3DtHvLHD8xGec+uYqzx4cAUBv7cJdnSCw
      Z+Tusqqlj9H9FidOnuKX328TavV7hfnsHJ4qUM0skDXuHv/S2yNEWwT59Q0UvYOYYnD8zPh9
      VSEO9IZYza+jtUV4JN6JVS7gaLtwywaBjgTCLKJFOtFcizu5VWwRJJ5I0B7679W9rwL5KtDf
      PCwVqKll0PLXlyhfnPS8pi5U1qyw9F4RrUJQ0pDujt3OksR5KQQ00tgmFrDQpU3dVGyJO1MB
      Ohs4yB5ESD+i1oBFTJdbqz8xe6S1QRtJgHU3wEwDCZBUq2iSZ99wNcxtSoB78a4K4VisLMxh
      mC57Bx4n0qbhVgvM/GnwxPAA+r0RtyssGxW6u3ejCpeN1RXms+tEu/vpi6msGA49e9pZWszx
      6GO9DZniFEWgSjY2XCGkf3YAVXHQJQOmKrJhBxRoZNIWVgQtkmc3haAi2U5SEOjbURUZAHk8
      txMXqDbo/topb4Bn9Ev5Oa5M3SS/OE3qXAYhHH69cJr3j6UoPLgPUFomdW4SC6iVcnz6xVk2
      zRLT127gFGdJfTlF/voPfJW56TfJ9mkaJMVxB3ntjSP07W7HqbvUNm4xXUww2i+pMe86bFWr
      tMV7eemFA4DALGZJnZ/h9aNJdN8L5NMkeCaAcLf4KX2SifkAb449T+b0WbqeHKJcNilt/r+z
      MxTt5Z23xsheneCDj89gAZvGMmsVaPH7ovo0EZ5fY+76ZS7dUhl75RBBx2LX/kHshWmWslnm
      F9f+lQB1q0qxUKSwlmMxbzOaTOIaS1RR6B54jrcPdZE6P4Xtz4F8mgTP1WMonKAvZnAxnSa6
      72lePXyUZ4RgcO8+erqqHPvow39k0MNHGOnTGE9/y1MHR7GLC3w3W2XsvXeJdti8mLQYGE5i
      TF7Brrtoul8gy2fnaWoZtJS+jHnBu0eYIxRMR66Ta0odRabKODobjqRWpyIIB2XNiEA4QWQG
      5bKrUhDehmgFQY8qF14rroot0VLaAnXiQbn58POtuFQGHW5ABjXcAD+7cs3sZbWCLlkWbokA
      tvCOZ1BxiUliVReB+1TDvwD2ZIVZsf2toQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='144' name='rank_vs_edgeweight_correlation' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAACQCAYAAABeUmTwAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO2de1hU1frHP+dMKmJaXvIukpfMvByFUUFhTFDyQirBTwsQEvSIpWUqWpiC
      IqiIl9JSK1RM0U5gYV7JS0yKAoO3lEQTAVPBRBPlpsxZvz9mgOGmInnpzPo8j8/j7LX2u9ce
      1rvXu/asd33/IYQQSCRGyj+fdAMkkieJdACJUSMdQGLUSAeQGDXSASRGjXQAiVEjHUBi1EgH
      kBg10gEkRo10AIlRIx1AYtRIB5AYNdIBJEbNM0+6ARJjQU2Acirbiz/WbUNvt49Y6NObBk+w
      VXIEkDxGOjE5SoNGo+FQ1Ds0/e59Zm3LfqItkg4geSLUaToIj9FmHD56+om2QzqA5KlAmxqF
      r5MtSqUSa7sxLE/I0ZeksM5rGHbWSpRKa+xc/InJ0hepA1C6hZOaGsWUYda4haeDNpUoXyds
      lUqUSlscvNaRoq+ek7AcLwfdNWydfAk/mQNCInksxAp/S1exPk33qSArRvg7WAnfPbeFKNKI
      kKE+IiKjQFd2Nkx42PiKPbeFEPlp4sSpKyK3SAghCsSxJY7Cat4hvUl/YenoIbzGh4jYLN25
      +Xt8heV7W0V2kRCiKFdcSTgh0oQQIjNS+Fi5iuXHskWRKBLZ+/yFg5WvkJNgyWMkhRXOSlYA
      tRqYY+O5htkO9SD5COqsRK449WNJSd1OXLkGtK7NtWg/pvuc5Hq+vsixqNRkXmvcQn1R6WfS
      JubtMUtYwfsz0xjY35b+9j0xB3KPxpHY153QHo1QAI3sxuLazlm+BZI8TjoxOWoTnm0rKXrO
      hc9jPqS3ouzh7Kh5zDhtxYY9X/KKqYL0cDecLxhUaP4S7Q1fI700gc3RNmh++pldu4L4KqQ1
      vpErsK+iRXIOIHnydOpFP6L5bPVxrmsBbR6Zpw+TnA0FBXnQ5AWa11FQePU0cScz72kqO2kX
      CTlmKEf5MH+ZP07PazhxHupZ9KVX3Ea+On4dLVqu719HRKqdHAEkTwGK3ryzzIfAeVMZti6H
      u7UaYN7TlY8WW/PK6968ETkLhz5LadPbmddbNYG7VZsy4RKbPxzBjDS9HZvphPQBFM4s+uQi
      U2aMoM/1fOq2GcC4NbP5hxByWxSJ8SJDIIlRIx1AYtRIB5AYNdIBJEbNfd8CaTSax9EOieSJ
      IN8CSYwaGQJJjBrpABKjRjqAxKiRDiB54miv7MLfyVa33n/MckpSASqtu5/gMXZYK5VY27kw
      d68uoyw93A2lUlnunzWBccVn5nAy3Bcn23J5Ag+9utvfUlhaVvznWrzgu1qkifWulsI/tqry
      myJ+mbsYYGUpLK0GCPdl8eLmPdpiM2ismL39vCh6iJZIHjdpYr2Hh1h5LFsUiQKREe0rhvru
      Ebcrq1qkESFDPcTKhCxRIIQoyr0iLlyutKbOrs8CEa/vBJmRPmKob7S4kFskhCgQOecyRKYQ
      ouYJMWnrhaulv6iy7z6YkXs7gCZE2Nn5iZjsIlGUHScWOlkJ/9jS7h3rb+h4RSI7bqFwsvQR
      kddq0KL1rsLSdb14GHeWVIPTK4XrgniDh1Wm2OI9VeyspF/f3uMrRq1OeSCzRfELxJQtmfpP
      KWL1KH2CTTn+FiFQQfYf3GzSnvaNFCga9aZX57tk/fFnFbUVNLK2pjs53L798Nds67kJzSZP
      Klu6LvkLufYHzf/VhdI0gGb06luLK1kVq545cZ3XBr30AEaz+P7rWwxxbKb7mP0LxzsMxr5e
      xZqPyAG0pEYVx1vl4jrtFfYHj9HneNriNHcvxfsCXDq8Bl8XXXxn672JVK3uuEm/kYz4cxNh
      +3MgJ4Yd6l4MtGlc+aULr5L4WRj7ugzl1bYA6YS7uRGeXlzB8LNhO5XYOnixTp9Amh7uhjJA
      XfwBN+X7fBLui4udNUqlLW+tSCJXbzEnYTlj7KxLck2jihuek8ByfbyqtLbDpfheqzpuhBTk
      51K/XtmeqVBcJOP3inVzc//L+ah39H8Dg7zecmiTI4nt6olDsdnbt6l9O4G5Xg66XGFrO8YE
      7+eK9hHtC6RNWsrkvRas3ruYNnUKObf233jNj2F3iD1nlr7NrJTRhO1bzyt1Csm8eBMT7uhO
      bGTDtA3jWKz4haUuE9kU78bsvkC9Prw9/mXcZ73FMPN2eKxdjnOzstdMWeGMcoXu/816vcfy
      lW/e/+ldsI/VC+7gEROPUyPIyzzKb4VVVc7DVPkRG9wXo/hlKS7jfiBpsiWqrChmLinknciD
      WDeC6/sDeWv6V3TbOgE2L2Rfz6X89HUP6hTe4rdfLwJwtorjxkB6uBvOK3RPGcelGgLq1uNW
      bi5Q6gRabRvMWld+futBfnz4Xmvq19GSl7aN2VM/J+Fbw0yyXPZtOkP/994te6JpVzz838O/
      kSmKwqskrv6A2ZFdHo0DpBxRk5V4Bad+pRmedLrCNVI4oq6N+yIvXjEFMKW5uSmgezy36tSF
      5qYADWnc4C45RQBaUsO9mHzamflTfmT+WjM6tKtD+iZP3jnnzeYAlc785Cg2ebbVZRMdXcfM
      oZMYHrmqgqOUwcSc9mYJrHh/JmkD+2Pb356e5lVVbkWnLs3RNa8xDdA9eXKPxpF4PpZEh28N
      6jqSCVi+2IFrgXP54PprvDrElleVXWgMmFRx3Bho67kJjafBgeQXyIw7jXZIb30YlEVi3F1a
      jK54bpdujYm704L6dQAUmJo7MaK7G7/+Dr2Ln3bpkXxXfwwrDf/ubbvSuuA36jcy1V2jTlN6
      jXRg+bqUR/ca9DmXz4nX6DZB0mg0NYinjxO1oQBnn+HYjl7OKtdTzJkyhTkRXZk3W1VxVzGF
      Kc17OWJnlkj8iYL72H6JCZujWeHTm7rndhE05jWmbKsk+LwfPXzZYXivmgBUQD2HBez7ehZD
      OuaTsHoyzm8sJ0lb9XGj5BVHHH79jNXHr6OlkIvblrCh0WuoKonXGw+y4/qypaivFgJa8tK+
      I/qCCuuSjqUlYfNxXh3bm7KpxT0Y1iGG+d8kk6dFFyZ/v59WfS0fjQN06tUPootvCrR5mZw+
      nEw2nbBS3WHjorUk52l1T+u0KyWxdOXUp8FzGSTGX6QQBa3sHOlw4iC/v9yBpkWV1deSl7yP
      /amNadnURH8sk4uXCkGbR9rP2zlSnFaancSuhBzMlKPwmb8Mf6fn0Zw4X617rWfRmx7H17Jk
      20UKAQpv8dvPiaQDKeodXDB5haGeH7Dok8lYZB3jTGbVx42TtrgvfJOrc0fQR/kqnjvbs+Bj
      h5KASB2gpHgqRoMhfPxRU36YMBCl0gbH6XH09R9HybQ4K5J114fgWGHUV/CKz3yczi/A0UaJ
      cqA7q8S7fOxQ79GEQIre77DMJ5B5U4exLucutRqY09P1IxZbK7Ccup6gRTOYZP85OXfr0uZ1
      f77y73gPay8xLnQ6H05zpd+SIhqY2zAhbCfe++fgGdKY/bN1IZDhHKBWA3NspqxkYg+A1tgO
      7ci4af3YUdccG083OjbRmzaBS5s/ZMSMNHLu1qKBuQ3TQ/pU72abuRAYcp5ZC13pNy8f6jai
      +4Bp+NuCSb6GuR6LOXldf9x9Pq+3ghunKj9urChaDGHud0OYW0mZKkCDyuBzg+6eLP7Os5Ka
      QLPRrAqp8iLY+X2NnV/Zw3I1qMSo+Vv8DiCRPCqkA0iMGukAEqNGOoDEqLnvW6C8vLzH0Q6J
      5IkgRwCJUSMdQGLUSAeQGDXSASRGjXQAyRNHmxlD0JsOqFT2DB3/GZp75QRnxhI6fij2KhX2
      Q91Z8FPFTIq8IyGMVKkIPlh6LEfzGRNHFF8jlNhM3erDh14LdDBYhd/uisc7+mwkzNXsYc3q
      yIjA2z2NsWo/bGpmSfLUk8E3/lG84PcNB7rXI3NnIO8v3suGwIG6peeGaI+xclIEDfw2sMui
      CYr8LH6/WbdcnTNsXFfAG292pCSn5uo25q2rxfiw7Vg0UZCfEslH/uG0XOP18COAjZ8atVqN
      eqMPHRlMsFr3ucadvwIZRHir8I7I+IvtSp4KzuxmX6fxeHdviILatBo6mbdu7OdgJW/f8w5s
      5ejQ6fzbogm1AUXdZrRtbugmWtI2rSbTdQqvPm9w+OwpTJ3fxqJJbUBB3U6jmdr/Nw6c+VuE
      QGa4hj0Kx5I8FVy7RrOurxis32+KZe9nyLxasWrK6RvY291j5fDVHaw8N5Qp/ctliTRrTvo3
      W0jJ14U92vw/KfrnLdIy8h6RRFJxCLPdgRPv+/FNxzmo/Trz04LpLDtwnhsFYNJQifui+Xi8
      bApoyYxdxuxFu0i5Dc+2bMg/sSg2RoS3O2lj1fjZQEaEN+7HLfGpFcfGIxncVrTHbdFnTOhp
      CtpMYpfNZtGuFG7zLGbd2/OPFqP5eoYMpJ5WCgryeNa0bLDzz2cu8fvvgHnZurm5WtKiP8B9
      z0kybt/FpKUtb388E9euDYAcYlYk4uAbSAOgzJYJHT2ZO2wOHzs76M5r2AVVtztkvXLtUY4A
      5/k66FuafxjNAT9dB2w+bDYbt6tRqw/wzbhn+GrZD1wGOBfOtHnnsF22nQPqfXw/9zWa3Mt0
      fl16vvclP+zby8rXc9m06yg6M9OYd64XCyMPoN73AwHdbpFeadKM5EmREeGNSqVCpZ+kmpiY
      crvcaoP/FrWidRU5wS3tprPq+32o1QeIXmTFqaCv0Ggh7+Bq1L0m41AhRRBAgfnwIDbu3Ida
      rSYmehVe3Z6hvZnZoxXJ6zcxGGfz4sGtFkWnwpj44REybutVzjr2oAjISDzERfuxeHTSTWgU
      deuh4I+qDbfoSOdmurrPN64PtwAySDx0kf4e3nRvqLtmbRNF1TYkTwQz1zDUrgYHzjQha2cy
      WgelPgy6SlJCEc1dKp7buWtjEgqbU782gIK6bV9naDdvzl66zPmvt6P+dTuqUMMzVOweHIza
      r3wEcJXDP9ei05xHOgdoTztzgw54bB0fRtTBc8Mu3eQ5ePAjueozCtnp/1a8PBj7lC8JO3kD
      LXe4tHMFmxvaYVPhFRA0flXFjc9WcujaHUBLfvoP7EzvRy+zloxeo38po/+30acjg4PV+s6f
      TVpKFvlaQHuDk1/MZrOZO0OaPs5JcGEh+aYNadagNtr8dOISSnNvW73UhQZx+/nx2h3Q5pOV
      cUn3UK8WrXipSwPidv7ApTvAnWtkXKq+FcnjxozRc535I3g0A1RDGL/nRQJ8S1+BHgw2eJ/f
      wAHfaS+wc5IjKpUDzrOOYPWRJ/dKqC0mbes0nB1UqBzcCEkfRug0K0x5RPsCVUqvUfy7xTt8
      MPB76nQagHfP0o1AFMpxBAyZxpzRAwlUtMR2YDvg2WpeQIFyXABDps3BY+BiFC1teSgzkseO
      orkDs7Y4MKuSMhs/dZnfghp0dSVoi2slNcti5hpGafpvY179aCOvflSx3n1zgv9Oy6HzMtO5
      Ua8FrerrRpmtfl7E2mxmpXPTJ900yVPK/5RSfP6ZCGaG7NVNsms9S6chcwgcKTu/pGr+p0YA
      iaS6/A1+CZZIHh3SASRGjdwYS2LUyBFAYtRIB5AYNdIBJEaNdACJUSMdQPLEeXCd4HTC3cpp
      AZeIB2i5HrccLwfbSvXDtHlp/BwezPsudqV6A/DwOsF6MUpxeV+QGDvIpkSf91NNVbqtTwqd
      BGupjrCVGOA8UayKv3n/Ux+CovORYvpI/fcxcrqIPF9Rrfj2zqm6tvhEinsqucb6G4FUazV0
      gsUhMc9ro/i9sqJrkcLHdblIyCoQQhSJ3AvRwndosTRqmtj4/nixLOaCyN3nX0aOt0YjQI46
      kLdnpWAZEk28RsPejRPpUFiVfOnDow5Q4lYq8/hQOC4tli/6iXBnQfhHa0j6i9pXSjbfL17A
      5SFrOaQ5RMSo24TO3kjZluei3htL/8mT6ZUYR8K95XH+90neTkznd/Hp0QgFdWgzfBoe1/eg
      rux7yb7C5TZtqFRLJCWZPIeR9GpaB51+2HDGj/gnV64BtMVt+RdMGWSOabnFPzVwgOOsDdpD
      1zkreLdHIxRAnaa9GNL3aZc6qUObvla0u5l7H2mmhyGba1lg3qEddahDmz69MMu8yjXDKtok
      4uN60dfxVaw6xRFvtOJgeqqhE0xWJqYvVqE012coXXev48cS/bBtrE/uppfKrZqHd4D0EyRm
      96Bv78py0NQEKN0IT00lasowrN3COb1rGtb2iw2eukkstn+Dz5K1eh3e8QQU6wfbOuG/6wpa
      fcw3dbteAskg5tOmRpVoClvbjSF4/xUepCtp89LY9lkE10Y4YAm6a7uFlz6lDT+rA8rGm0qd
      XlV6uFu548W6wy8x2LkL+8PCSdVqSd61nT8H29HD8PpJcfxs1ouejdvStYcpe/YfMmh3DifD
      i3WLbXFadtjgxFSifJ10OrdKWxy81pHyAPf7tFMdnWD+vE5ccT+wtsPlndWl8wWFJb5fOHBk
      bD+Uyj4M8T3HsEC3+wszPnTodmaVcLL0F7GVFsYKf0tH4eE1XoTEZokCIYQoihcL7OzEgnh9
      TKwJEXbF8W3aeuFqOU5suJArikSRyD62XLhaTRLR+gA51t9SuK43iISLNCLEwU5M3ZohCoQQ
      BWfDhIeVk1idUllbys8BVMIlcKe4WFBcvF64GsbZ5T/rLijOr/cQNh7rRdmQ/qaI9XcQDv6x
      omRGcTNRhDhbCoehI8WbIYdEdrkpgCbETtiFaHRWY/2FlV2I0OjLbu/xFVYO/iKmOI7dObNk
      DpC/x1dYvrdVZ68oV1xJOPG3nBukrXct+Vv4xwohYv3F1J1lI/7zYTNF2Pn7GCrIEedi/IXL
      pGjdPOpmrJj3/kqDOUCMmDc+SBwqP5mI/avmACZ1qUsWf1QpcZ5Ha7dQfFVN0cm69uYtj+ZE
      R+4jF0jav5sXhw828NBWtDU3RYGCRj1G4tDuMEdPV2E65Qjq2m/g7dSGOkCdjl54v5aB+nB6
      maez4Wy/ZA5waDsLuh/Ae/jiB5YmzVEHMjHiRYJWeNKuZKzWkho+mVkXXFlVLNeaoybgrRWY
      vr+AgabXeL5dexoVxBE4zJPwVC2QzBF1HrZ9dGOCwrIPfW+qOZKss5gUt592rmMZVBzH1jMp
      aYOJeXvMElbw/sxlhO9MpqBLl4eUnX2ytPXcVCInG6ACmrxA5onTBqOgXif4XvrOAHXq02HQ
      WBxzTpACXPohDO0b7xrMAQbh0e80MfeZ6D28A7TtSo/njhNX5Tur5rzUvmx41NbFE9vDezmU
      k8CPey0ZVVHPUo8WbVEtFA+RrVDhCy5Pnfp0GO6IdfZhNA+giKpNDWfyrAu4rpqNyuB2KnOK
      7B83s72HJz62g/ANC6LZ2hlM+TCIy14heLZTQPIBdl+5y/apfXRO2n82sVxh94Hk+zfkpQls
      jl6BT++6nNsVxJjXpvAwksZPHdXQCY5bMYXwxEyd1q82j7Rtn/GfZn34F9D85a6kfPsNp24V
      AlB4NZHt+4to0fzel6/BJNiSCdP7Erd8FuF6PeDCq4nsirtU9Sn17HEZlsR//DeTMMAF+zI3
      WUChTmiXi9tW88211+j/L/1p9Z4j8+xZrmtBq9VCJytUd7YS9p1Om7fw3FrC9pihsn6QZ2Ih
      V3/cz+FarWhRnJWZeRGdjHAaP28/Qolkb46awIkRvBi0QteB9VTlFCb161Pr10QSrmuhXleG
      2Rdw8PDzvNy+FlogPTGOK/0DiTUQ1d7h24MrcTpd4U6de5ASs0enoVx4i9/SS7/L7KRdJOSY
      oRzlw/xl/jg9r6GaksZPKQ+uE9zH7W34zySd1m+f1/jg5y4ldRWWUwkafJpFI15FqVQy0H0V
      Nz2XM+4l0M1J9fO1qdvZPtXgN4SaRXRV/Q4QK/wtXcX6yoLUlNXCydJgLiCEfg5gIwYNKn1/
      vuVsgUF5dOm79aAjuiufjxTTnQcIK0tLYTXAXQTtuywqvnEXouIcQNfOZYeydfWLzouNEwYI
      K0srMcB5uli/dYkYpY+7DeNVw7g11t+y3PHie70p4pe5iwFWlsLSZpAYu+yQyMrYKeaM9BLr
      0zLFFm/LCvGuyNwivC29xZZMXVsip48UNsX35D+uZA5wW/OlmKi/X0urAcJ5eqSo5CcGSTV5
      zMuhtVzfH8hbK1uwYuuEUoXv9HDcnC8wQRNAZVGLRPKoeIxLIdQEKPswbMmf/DvUQN5eInmC
      yIQYiVEjF8NJjBrpABKjRuoES4waOQJIjBrpABKjRjqAxKiRDiB54vw1MqlabpyMYJZ7aVlQ
      TGbJIrs7l/YTOnEEDioVKocRTF17ihxq7ABaMmND9fqrKhxGTGTNsadt0qxTmVSpJhFlKLx2
      MBiVdwRSe/JJYyCTqt7Fl06ZLFy8l0p7UbFM6sQN7FKriYlaguvLepnUy5Es3FDAsKAoYtRq
      dm2YSsNvFrIjG+AIn36s4ZX3wtiuVnMg+lMG/BbEumM1dICcg4vwmXeOnoHfcECtZnvYeF58
      BCmRB4NrLpPavTus26h5oKQZyWPkr5JJbeZCcKgXfdvWRQHUbmLB0P6NuJ0L0IsPvprB0M7F
      57Vl6Gudyc2tkQP8wteh+3hl5mL+3b1hyUUdrFo+vMlHSMv/exs79Vb23WN4lTwB/iqZVIUC
      Q3EsbWYM4ac7YWMGoKCMclbOKcJ2mmJnURMHyPiFo9e7YWVZWUrkQYJV3kSkpbFtpgv23hH8
      GuOHveMnHCupc4xPHN344oxWJ6uqmkxw6HiG2qtQObypj9904Yvfbji32l2nLqjXy9GmbTOI
      98YTGpt576e7Qsnrw9MJjzxXSaGWtG2zeNNBVS4OPcYnjo58UtzoY5/gqFIxL1Z/pextTLEP
      5qBW3543daGgymEEEzeerfZXaozcUya1HCUyqUPtdSH3m7OIOFX+iXaHSzuDmBQGE4JHU1Zd
      WsuNk2uZGpBA31nTsTKtiQMU5JNHUxo1rqrCLWIXL+HC8NXsCnOls/0bDONHDmj0neeYmh+b
      DWPwy6Wu2e7/PuWHfQeIDlWRuiiU3dk6kezgwdDRZ6NOAM3PRhcLTvkCMfpLdqnV7PrUlnPz
      phFeWd82oOObY2m37dsKw6v22EqmH+jBku1q1OpdfGp7Er/Fe8mjJ6pBcOyXNAAyfj1J98GD
      +fX4SQDyko7wi70Ka0UBB8JCueumCwUPRH/B+B4mSCryqGRSAdDeIDZ0JpvrebNylgPNy+gl
      3uG3iDmEnupNwFIvuuqf2zVKiTTlKtfvkRLZalQQ7/fTxV0olLi4NmNH9AHygGPqHzEfOtDA
      Q1vQum1dFCho2N0Re/METvxahelziRyqPRyP11tRG6jdwYMx9hc5lJhR4Qsug+kA3hiQwJZd
      V8uZO8TVpBW8NVCFSjUQr69+peCybjeH7pZ9uXj0JNlkczyhPlbjVHRLSOQMWo5q4umjtECB
      CW1fbEPSqhnMXhlBzJkCOneWyvaVYeYaVqLk6GcDNGlC1qlkg9FbL5NaibBP566Nyakgk3qa
      s5cAtBxbvZD0kYuY3r855bVCr24LZmur6cxz7YphzPLwDmDWme4NfuFIUlVBdTM6vFg2PDIb
      +RZ942OJy9Fw4EBPRg6pSr7ovxRpa/HMQ6REVviCy6Cg51tj4OvNHCsXLzUYuZQDBjKb6jBX
      zACFhZI+R4+QlHOK47d606OpBcq2yZzNPklSXDesLHXDd0evdXyzxBtl3d+IWTSeETN3UEkY
      KynPXyKTCmTvIKrw/3DrULuSixxjc1w33u7fsIJj1GAS3JOx7/Uh/vN5RJy8gRa4c+0oMUcu
      V32K6QBGDD7G98GRJKpGMKDMTRZw5w7oYrgwtl6zp293XUm9eg3I+u03bhSnRHbsRb8729jw
      wyXuAHd+28DX+9rQr9cDPHWbDmFktx18u6f0bVVHCyvYUfxHAG1+Fr8mnCEbwNQSK4t4NOuS
      SO9jgRmmdP1XPkfCD3DI3BarxgDZHIvRkNPagje857DI73WeP3aa1Op8nUbLXySTeu4Mh7+f
      ygD96F8mCrh8luS4T3ApV+YdkVFTjTAtmbHLmLs0htM3CjBp2AXngCVM6HmUYNU6zDeG4Vq+
      T55bi5v3ViyXRjNVqffHjAi83ddzrSHcuFGASUtbJsz3x7nYmzN2MGvGJ/x8uQCT4UuJma5E
      m7aNOR+v5kjGbXi2E0NmBvJBJUOf7ncAd9LGGowI59bi5r2eix192Bjmihk5nIpYxMKNOhX7
      Ws+a0X3UNILe7okpurjVfXUag4Nj8LNRwJkvGPXvjdT32UiYqxmQx7H1s1jyn5Ml51v5zGfe
      cPNK2iN5mnjMInlabsQuYuwXzVm8yatU4DgjAm/3NMaq/agQtUgkj5DHuBTiIMGqAbisuIlX
      0IOpe0skjxopkyoxauRiOIlRIx1AYtTIXSEkRo0cASRGjXQAiVEjHUBi1EgHkBg10gEkT5wH
      l0kF7ZX9BI8plsZyYe7e7Aeyk5NQLKFqjd2YYPZf0a+GrNnm0kUi+9Cq0m27bQaJsbO3iBOP
      RoH0IbjHNu2Sp4RqyKQWaUTIUA+xMkEnu1WUe0VcuHz7/nYyI8UkLwP5pNObhI/HapEi/gKZ
      1LemHabLzC38pNGg2buRacqzJJyqiVWJUVENmdTcfd+gGT6Ld3vpZLcUps0xb1Hv/nZSfqHe
      m+NK5ZNeceVDu7P8mFyjECiJNXP1Mqn6BlGnKV2Gz2Zc34e3KjEyqiGTeubEdV4bVMXG+vey
      07wFFzZu0invANq869z9Zw6p6bk1kUk9xfGbVcmk6slJYLk+XlPaOuEblarP/FEToBxN0Nrg
      krhs2JRtJVKl2tQofJ10kvfWdmNYXhzMpYfjpgxAnZPA8rds9ZKp2eyd+yYOtjrZG1uHdwlL
      Nnb16b8P1ZFJzc39L+ej3sHFzlr3t3byJfxkzv3tvDSOBcN/ZY6jDUqlkldHTmfDyTwyr16r
      gQMUFpBPM17Q5wSrA5Tl1BmziJq5hMJ3Ijmo0RAfPZl6X0znq5Jc8TzyW47ikxJtUl4AAAW6
      SURBVB9+Jj5mBh0OfsNP6YA2iaWT92Lx6V40Gg0/rRnAsWnziSnp0+cImxNBi9l7iNer4LUc
      MZ+ovRo0mniiJz7DqkXfcw+lMskTpLyKp0ndetzKLfvA0mrbYFZFTnDrQX6s23UYjSaePcv6
      cjLgcxK097OjoJ3zYiL3H0aj0fBzzFom9HiGji+2vf/u0FVSx6RUJrUxqAI0aALSCXdz5gJA
      7lHiEs8Tm+jAtwanOWaCTh6mAR07d6B+HaBOYxoWV0g5gjorkStO/VhSclYnveS9jv7vLWF0
      iWhdLYpOrGHs1IOk5dzVV7eg6KFvTPIoaeu5CY2nwYHkF8iMO412SG99+KKXSR1d8dwu3RoT
      d6eFrs+gwNTciRHd3fj1d+jd5MHtQBYHD9Sic9AjlUkF6IHvjlJFxCqlS8vznAufxxuetwnP
      EgHIjnQwUGwkaQ0fbKiN95afdHWXOj70LUmeANWQSW08yI7ry5aivloIaMlL+47oCyqs297P
      TjapycXyqtc5/tkMNrT1wrFZDWVSPd7pQdy8yXyWeBWdwmkuucWP3noW9O5xnLVLtnFRL396
      67efSUyv0qCOTr3oRzSfrT7Odb0ebObpwyRXtftEYQF5po1p8Vwdnczp4fvsjSJ5ynhwmVQa
      DOHjj5ryw4SBKJU2OE6Po69/sd7cve2kfquXV7VxYX7acFb49aUeDyCQcS+aOa9ka8NFzJrl
      zLrr+VC3ER26ufNOJ4BmuASGcH7WQlz7zSOfujTqPoBp/rb3NqrozTvLfAicN5Vh63K4W6sB
      5j1d+WixNdyupH4fNya1GsfEft9St/MgJiib1OSWJE8ARYshzP1uCHMrKVMFaMoohzbo7sni
      7zwrqXkvO40Z6B/JQP+K58jl0BKjRi6FkBg10gEkRo10AIlRIx1AYtRImVSJUSNHAIlRIx1A
      YtRIB5AYNdIBJEZNjZZCSCR/BdrMGBZOCWXPZS3PdnqDeUveRVlpmoluq/vVhsu9BgfrZLMo
      3sa+TCHBxTuOHwxG5bfboKwjPhvD/gIHyIvBb/B8DmLB9O+WM7xEM6zcvvwHg1GtM9fvxy+R
      FGOgE9y9Hpk7A3l/8V42BJaKZJRymd9N3mWLejSVaZFe/t2Ed7eoGV1J4eVLl3AMUTPDquzx
      GodAeQd/4qCNDz4WRzmSJF+ZSqpJNXSCyb7K5VatKu38kM3Vy61oVYVKb1ZmLVpXUlZjpfij
      mngsrF7DpndH4jVHpRC1pHpUQyeYPzIxNa8qfviDTFPzKqKLPP7IaopZJYU1cwDtMRLi2mDR
      vTFmnbtTd5+aw9IDJNWgOjrB/Pkn8cV60fZDcf8gTK/nDPAnf8avxl2l13p2/4CwksI/uZG9
      Gz+9NpjDiInM35OGlppOgk8eYj89CTQH2ljSl4UknQSbnjWyKvkfxnCiOjhYjV+JTnCpE1Sp
      E2w1g33qGbr/37lF6sEV+M/bwfLQYTTGihn71OhK73Ar9SAr/OexY3kowxq3ZPQaNbrsSC35
      WSf4dsFsVrf8umYjwJnEQ+T3taQ7gMICZZ8cDiWeqYlJyf84NdEJLkPt+rSzc2fIrdNUzAGs
      Tf12drgPucXpCoUK6jazwMOlMyeTL9fEAc6g3pvJ3d1+emnKwcw/CJl71UgXkDww1dAJPrJm
      JhFHs8jXadmSvvNLtja10D2Aj6xhZsRRsnSF5Kfv5MutTbHoDmREMT90P6m37gA6Od8vvk6h
      j0XLGoRAGUeJz7Th493BOBQ39moUk1x2cjTj37ws33VKHgidTvDCKaMZcFnLsz3dCAksqxOs
      VulGi16j3EgNnYazbwa375rQ0vZtAmbq6/YahVtqKNOcfcm4fReTlra8HTCTgaaA2euMtfiU
      +e4LOX2jgFrPdmLIzEV80LEGInlXoybhkjSc3cEOBtHbVaImuXBgQCQrnQvk7wCSpx6pEikx
      auRaIIlR8//Wm7kzmPDC5wAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
